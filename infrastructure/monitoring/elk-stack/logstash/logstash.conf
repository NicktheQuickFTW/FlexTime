input {
  # API Service logs
  tcp {
    port => 5000
    codec => json
    tags => ["api-service"]
  }

  # Scheduler Service logs
  tcp {
    port => 5001
    codec => json
    tags => ["scheduler-service"]
  }

  # Application logs
  file {
    path => "/var/log/flextime/*.log"
    start_position => "beginning"
    codec => multiline {
      pattern => "^\d{4}-\d{2}-\d{2}"
      negate => true
      what => "previous"
    }
    tags => ["application"]
  }

  # Kubernetes logs
  tcp {
    port => 5002
    codec => json
    tags => ["kubernetes"]
  }

  # Constraint violation logs
  tcp {
    port => 5003
    codec => json
    tags => ["constraints"]
  }

  # Performance metrics
  tcp {
    port => 5004
    codec => json
    tags => ["metrics"]
  }
}

filter {
  # Parse timestamps
  date {
    match => ["timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSS"]
    target => "@timestamp"
  }

  # Extract fields from log messages
  if "application" in [tags] {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \[%{DATA:service}\] %{GREEDYDATA:log_message}"
      }
    }
  }

  # Parse constraint violations
  if "constraints" in [tags] {
    json {
      source => "message"
      target => "constraint_data"
    }
    
    mutate {
      add_field => {
        "constraint_type" => "%{[constraint_data][type]}"
        "constraint_severity" => "%{[constraint_data][severity]}"
        "affected_teams" => "%{[constraint_data][teams]}"
        "violation_details" => "%{[constraint_data][details]}"
      }
    }
  }

  # Parse performance metrics
  if "metrics" in [tags] {
    json {
      source => "message"
      target => "metrics_data"
    }
    
    mutate {
      add_field => {
        "metric_name" => "%{[metrics_data][name]}"
        "metric_value" => "%{[metrics_data][value]}"
        "metric_unit" => "%{[metrics_data][unit]}"
      }
      convert => {
        "metric_value" => "float"
      }
    }
  }

  # Extract Kubernetes metadata
  if "kubernetes" in [tags] {
    json {
      source => "message"
      target => "kubernetes"
    }
    
    mutate {
      add_field => {
        "k8s_namespace" => "%{[kubernetes][namespace]}"
        "k8s_pod" => "%{[kubernetes][pod_name]}"
        "k8s_container" => "%{[kubernetes][container_name]}"
      }
    }
  }

  # Add environment information
  mutate {
    add_field => {
      "environment" => "${ENVIRONMENT:production}"
      "datacenter" => "${DATACENTER:us-east-1}"
    }
  }

  # Remove unnecessary fields
  mutate {
    remove_field => ["host", "port", "@version"]
  }

  # Add unique document ID for deduplication
  fingerprint {
    source => ["message", "@timestamp"]
    target => "[@metadata][fingerprint]"
    method => "SHA256"
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    user => "elastic"
    password => "${ELASTIC_PASSWORD}"
    ssl => true
    ssl_certificate_verification => false
    
    # Dynamic index naming
    index => "flextime-%{[tags][0]}-%{+YYYY.MM.dd}"
    document_id => "%{[@metadata][fingerprint]}"
    
    # ILM settings
    ilm_enabled => true
    ilm_rollover_alias => "flextime"
    ilm_pattern => "{now/d}-000001"
    ilm_policy => "flextime-ilm-policy"
  }

  # Output critical errors to monitoring system
  if [level] == "ERROR" or [level] == "CRITICAL" {
    tcp {
      host => "alertmanager"
      port => 9094
      codec => json_lines
    }
  }

  # Debug output
  if [@metadata][debug] {
    stdout {
      codec => rubydebug
    }
  }
}