# Jaeger distributed tracing for FlexTime platform
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-all-in-one
  namespace: monitoring
  labels:
    app: jaeger
    component: all-in-one
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: jaeger
      component: all-in-one
  template:
    metadata:
      labels:
        app: jaeger
        component: all-in-one
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14269"
    spec:
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:1.49.0
        ports:
        - containerPort: 5775
          protocol: UDP
          name: zk-compact-trft
        - containerPort: 6831
          protocol: UDP
          name: jg-compact-trft
        - containerPort: 6832
          protocol: UDP
          name: jg-binary-trft
        - containerPort: 5778
          name: config-rest
        - containerPort: 16686
          name: query
        - containerPort: 14268
          name: c-tchan-trft
        - containerPort: 14250
          name: grpc
        - containerPort: 14269
          name: admin-http
        env:
        - name: COLLECTOR_ZIPKIN_HOST_PORT
          value: ":9411"
        - name: SPAN_STORAGE_TYPE
          value: "elasticsearch"
        - name: ES_SERVER_URLS
          value: "http://elasticsearch:9200"
        - name: ES_USERNAME
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: username
        - name: ES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: password
        - name: ES_INDEX_PREFIX
          value: "jaeger"
        - name: LOG_LEVEL
          value: "info"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Jaeger Query Service
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: monitoring
  labels:
    app: jaeger
    component: query
spec:
  type: ClusterIP
  ports:
  - port: 16686
    targetPort: 16686
    name: query
  selector:
    app: jaeger
    component: all-in-one

---
# Jaeger Collector Service
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: monitoring
  labels:
    app: jaeger
    component: collector
spec:
  type: ClusterIP
  ports:
  - port: 14268
    targetPort: 14268
    name: c-tchan-trft
  - port: 14250
    targetPort: 14250
    name: grpc
  - port: 9411
    targetPort: 9411
    name: zipkin
  selector:
    app: jaeger
    component: all-in-one

---
# Jaeger Agent Service
apiVersion: v1
kind: Service
metadata:
  name: jaeger-agent
  namespace: monitoring
  labels:
    app: jaeger
    component: agent
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 5775
    targetPort: 5775
    protocol: UDP
    name: zk-compact-trft
  - port: 6831
    targetPort: 6831
    protocol: UDP
    name: jg-compact-trft
  - port: 6832
    targetPort: 6832
    protocol: UDP
    name: jg-binary-trft
  - port: 5778
    targetPort: 5778
    name: config-rest
  selector:
    app: jaeger
    component: all-in-one

---
# Jaeger ConfigMap for sampling strategies
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-sampling-config
  namespace: monitoring
  labels:
    app: jaeger
data:
  sampling_strategies.json: |
    {
      "service_strategies": [
        {
          "service": "flextime-api-svc",
          "type": "probabilistic",
          "param": 0.1,
          "max_traces_per_second": 100
        },
        {
          "service": "flextime-scheduler-svc",
          "type": "probabilistic",
          "param": 0.2,
          "max_traces_per_second": 50
        },
        {
          "service": "flextime-frontend",
          "type": "probabilistic",
          "param": 0.05,
          "max_traces_per_second": 200
        }
      ],
      "default_strategy": {
        "type": "probabilistic",
        "param": 0.1,
        "max_traces_per_second": 100
      },
      "per_operation_strategies": [
        {
          "service": "flextime-scheduler-svc",
          "operation": "generate_schedule",
          "type": "probabilistic",
          "param": 1.0
        },
        {
          "service": "flextime-api-svc",
          "operation": "POST /api/schedules",
          "type": "probabilistic",
          "param": 0.5
        }
      ]
    }

---
# OpenTelemetry Collector for distributed tracing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: monitoring
  labels:
    app: otel-collector
spec:
  replicas: 2
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:0.86.0
        ports:
        - containerPort: 4317
          name: otlp-grpc
        - containerPort: 4318
          name: otlp-http
        - containerPort: 8888
          name: metrics
        - containerPort: 8889
          name: prometheus
        env:
        - name: JAEGER_ENDPOINT
          value: "http://jaeger-collector:14268/api/traces"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: otel-config
          mountPath: /etc/otel-collector-config.yaml
          subPath: otel-collector-config.yaml
        args:
        - --config=/etc/otel-collector-config.yaml
      volumes:
      - name: otel-config
        configMap:
          name: otel-collector-config

---
# OpenTelemetry Collector Service
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: monitoring
  labels:
    app: otel-collector
spec:
  type: ClusterIP
  ports:
  - port: 4317
    targetPort: 4317
    name: otlp-grpc
  - port: 4318
    targetPort: 4318
    name: otlp-http
  - port: 8888
    targetPort: 8888
    name: metrics
  - port: 8889
    targetPort: 8889
    name: prometheus
  selector:
    app: otel-collector

---
# OpenTelemetry Collector Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: monitoring
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 10s
              static_configs:
                - targets: ['0.0.0.0:8888']

    processors:
      batch:
        timeout: 1s
        send_batch_size: 1024
      memory_limiter:
        limit_mib: 400
      attributes:
        actions:
          - key: environment
            value: production
            action: insert
          - key: cluster
            value: flextime-k8s
            action: insert

    exporters:
      jaeger:
        endpoint: jaeger-collector:14250
        tls:
          insecure: true
      prometheus:
        endpoint: "0.0.0.0:8889"
      logging:
        loglevel: info

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679

    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch, attributes]
          exporters: [jaeger, logging]
        metrics:
          receivers: [otlp, prometheus]
          processors: [memory_limiter, batch, attributes]
          exporters: [prometheus, logging]

---
# Secret for Elasticsearch credentials
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-credentials
  namespace: monitoring
type: Opaque
stringData:
  username: "elastic"
  password: "CHANGE_ME_IN_PRODUCTION"