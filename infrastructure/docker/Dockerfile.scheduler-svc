# Multi-stage Dockerfile for Scheduler Service (Python-based)
FROM python:3.11-slim AS base

# Install security updates and essential tools
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y \
    curl \
    wget \
    gnupg \
    ca-certificates \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Create app user for security
RUN groupadd -g 1001 flextime && \
    useradd -r -u 1001 -g flextime flextime

WORKDIR /app

# Copy requirements for dependency installation
COPY backend/python/intelligence_engine/requirements.txt ./requirements.txt

# Stage 1: Dependencies
FROM base AS dependencies

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Install OR-Tools and optimization libraries
RUN pip install --no-cache-dir \
    ortools==9.7.2996 \
    numpy>=1.24.0 \
    pandas>=2.0.0 \
    scikit-learn>=1.3.0 \
    redis>=4.5.0 \
    psycopg2-binary>=2.9.0 \
    fastapi>=0.100.0 \
    uvicorn[standard]>=0.20.0 \
    pydantic>=2.0.0 \
    celery>=5.3.0

# Stage 2: Build
FROM dependencies AS builder

# Copy source code
COPY backend/python/ ./python/
COPY shared/ ./shared/

# Create necessary directories
RUN mkdir -p \
    /app/data \
    /app/logs \
    /app/models \
    /app/temp

# Stage 3: Production
FROM dependencies AS production

# Copy built application
COPY --from=builder --chown=flextime:flextime /app/python ./python
COPY --from=builder --chown=flextime:flextime /app/shared ./shared
COPY --from=builder --chown=flextime:flextime /app/data ./data
COPY --from=builder --chown=flextime:flextime /app/logs ./logs
COPY --from=builder --chown=flextime:flextime /app/models ./models

# Set ownership
RUN chown -R flextime:flextime /app

# Set environment variables
ENV PYTHONPATH=/app/python \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PORT=4000 \
    WORKERS=2 \
    MAX_WORKERS=4 \
    TIMEOUT=300 \
    KEEP_ALIVE=2

# Switch to non-root user
USER flextime

WORKDIR /app/python

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:4000/health || exit 1

# Expose port
EXPOSE 4000

# Start the application with Uvicorn
CMD ["uvicorn", "intelligence_engine.api.app:app", "--host", "0.0.0.0", "--port", "4000", "--workers", "2"]

# Stage 4: Development
FROM base AS development

# Install additional development tools
RUN apt-get update && \
    apt-get install -y \
    git \
    vim \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Install all dependencies including dev dependencies
COPY backend/python/intelligence_engine/requirements.txt ./requirements.txt
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir \
    ortools==9.7.2996 \
    numpy>=1.24.0 \
    pandas>=2.0.0 \
    scikit-learn>=1.3.0 \
    redis>=4.5.0 \
    psycopg2-binary>=2.9.0 \
    fastapi>=0.100.0 \
    uvicorn[standard]>=0.20.0 \
    pydantic>=2.0.0 \
    celery>=5.3.0 \
    pytest>=7.0.0 \
    black>=23.0.0 \
    flake8>=6.0.0 \
    mypy>=1.0.0

# Copy everything for development
COPY . .

# Create directories
RUN mkdir -p \
    /app/data \
    /app/logs \
    /app/models \
    /app/temp \
    && chown -R flextime:flextime /app

ENV PYTHONPATH=/app/python \
    PYTHONUNBUFFERED=1 \
    PORT=4000 \
    ENV=development

USER flextime
WORKDIR /app/python

EXPOSE 4000

# Development command with hot reload
CMD ["uvicorn", "intelligence_engine.api.app:app", "--host", "0.0.0.0", "--port", "4000", "--reload"]