# Docker Compose for FlexTime Agent Microservices
# Development and testing environment

version: '3.8'

services:
  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: flextime-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - flextime-net
    environment:
      - REDIS_REPLICATION_MODE=master

  postgres:
    image: postgres:15-alpine
    container_name: flextime-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_DB: flextime
      POSTGRES_USER: flextime
      POSTGRES_PASSWORD: flextime_password
      POSTGRES_MULTIPLE_DATABASES: flextime_scheduler,flextime_conflicts,flextime_travel,flextime_intelligence
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flextime -d flextime"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - flextime-net

  # Communication Hub Service
  communication-hub:
    build:
      context: ../
      dockerfile: docker/Dockerfile.communication-hub
    container_name: flextime-communication-hub
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: debug
      JWT_SECRET: development-jwt-secret-change-in-production
      CORS_ORIGINS: http://localhost:3000,http://localhost:3005
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
    volumes:
      - communication_hub_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - flextime-net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Scheduler Service
  scheduler:
    build:
      context: ../
      dockerfile: docker/Dockerfile.scheduler
    container_name: flextime-scheduler
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://flextime:flextime_password@postgres:5432/flextime_scheduler
      COMMUNICATION_HUB_URL: http://communication-hub:3001
      LOG_LEVEL: debug
      JWT_SECRET: development-jwt-secret-change-in-production
      CORS_ORIGINS: http://localhost:3000,http://localhost:3005
      MAX_CONCURRENT_JOBS: 5
      SCHEDULE_TIMEOUT_MS: 300000
    volumes:
      - scheduler_logs:/app/logs
      - scheduler_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      communication-hub:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s
    networks:
      - flextime-net
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Conflict Resolution Service
  conflict-resolution:
    build:
      context: ../
      dockerfile: docker/Dockerfile.conflict-resolution
    container_name: flextime-conflict-resolution
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://flextime:flextime_password@postgres:5432/flextime_conflicts
      COMMUNICATION_HUB_URL: http://communication-hub:3001
      LOG_LEVEL: debug
      JWT_SECRET: development-jwt-secret-change-in-production
      MAX_CONCURRENT_RESOLUTIONS: 10
      RESOLUTION_TIMEOUT_MS: 60000
    volumes:
      - conflict_resolution_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      communication-hub:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - flextime-net
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.75'
        reservations:
          memory: 384M
          cpus: '0.25'

  # Travel Optimization Service
  travel-optimization:
    build:
      context: ../
      dockerfile: docker/Dockerfile.travel-optimization
    container_name: flextime-travel-optimization
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://flextime:flextime_password@postgres:5432/flextime_travel
      COMMUNICATION_HUB_URL: http://communication-hub:3001
      LOG_LEVEL: debug
      JWT_SECRET: development-jwt-secret-change-in-production
      MAX_CONCURRENT_OPTIMIZATIONS: 5
      OPTIMIZATION_TIMEOUT_MS: 180000
      TRAVEL_API_KEY: your_travel_api_key_here
    volumes:
      - travel_optimization_logs:/app/logs
      - travel_cache:/app/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      communication-hub:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - flextime-net
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Constraint Management Service
  constraint-management:
    build:
      context: ../
      dockerfile: docker/Dockerfile.constraint-management
    container_name: flextime-constraint-management
    restart: unless-stopped
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://flextime:flextime_password@postgres:5432/flextime
      COMMUNICATION_HUB_URL: http://communication-hub:3001
      LOG_LEVEL: debug
      JWT_SECRET: development-jwt-secret-change-in-production
      RULE_ENGINE_TIMEOUT_MS: 30000
    volumes:
      - constraint_management_logs:/app/logs
      - constraint_rules:/app/rules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      communication-hub:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - flextime-net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Intelligence Engine Service
  intelligence-engine:
    build:
      context: ../
      dockerfile: docker/Dockerfile.intelligence-engine
    container_name: flextime-intelligence-engine
    restart: unless-stopped
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: development
      PORT: 3006
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://flextime:flextime_password@postgres:5432/flextime_intelligence
      COMMUNICATION_HUB_URL: http://communication-hub:3001
      LOG_LEVEL: debug
      JWT_SECRET: development-jwt-secret-change-in-production
      ML_MODEL_PATH: /app/models
      TRAINING_TIMEOUT_MS: 1800000
      PREDICTION_TIMEOUT_MS: 30000
    volumes:
      - intelligence_engine_logs:/app/logs
      - ml_models:/app/models
      - ml_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      communication-hub:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    networks:
      - flextime-net
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.75'

  # State Management Service
  state-management:
    build:
      context: ../
      dockerfile: docker/Dockerfile.state-management
    container_name: flextime-state-management
    restart: unless-stopped
    ports:
      - "3007:3007"
    environment:
      NODE_ENV: development
      PORT: 3007
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://flextime:flextime_password@postgres:5432/flextime
      LOG_LEVEL: debug
      JWT_SECRET: development-jwt-secret-change-in-production
      STATE_TTL_SECONDS: 3600
      MAX_MEMORY_ENTRIES: 10000
    volumes:
      - state_management_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - flextime-net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: flextime-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - flextime-net

  grafana:
    image: grafana/grafana:latest
    container_name: flextime-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    networks:
      - flextime-net

# Networks
networks:
  flextime-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  communication_hub_logs:
    driver: local
  scheduler_logs:
    driver: local
  scheduler_data:
    driver: local
  conflict_resolution_logs:
    driver: local
  travel_optimization_logs:
    driver: local
  travel_cache:
    driver: local
  constraint_management_logs:
    driver: local
  constraint_rules:
    driver: local
  intelligence_engine_logs:
    driver: local
  ml_models:
    driver: local
  ml_data:
    driver: local
  state_management_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local