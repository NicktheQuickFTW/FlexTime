# Multi-stage Dockerfile for API Service
FROM node:18-alpine AS base

# Install security updates and essential tools
RUN apk update && \
    apk upgrade && \
    apk add --no-cache \
    curl \
    bash \
    postgresql-client \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create app user for security
RUN addgroup -g 1001 -S flextime && \
    adduser -S flextime -u 1001 -G flextime

WORKDIR /app

# Copy package files for dependency installation
COPY package*.json ./
COPY backend/package*.json ./backend/

# Stage 1: Dependencies
FROM base AS dependencies

# Install all dependencies (including dev dependencies for building)
RUN cd backend && npm ci --include=dev

# Stage 2: Build
FROM dependencies AS builder

# Copy source code
COPY backend/ ./backend/
COPY shared/ ./shared/

# Build the application (if build step exists)
RUN cd backend && \
    npm run build 2>/dev/null || echo "No build step defined"

# Remove dev dependencies
RUN cd backend && npm prune --production

# Stage 3: Production
FROM base AS production

# Copy built application and production dependencies
COPY --from=builder --chown=flextime:flextime /app/backend ./backend
COPY --from=builder --chown=flextime:flextime /app/shared ./shared

# Create necessary directories with proper permissions
RUN mkdir -p \
    /app/logs \
    /app/data \
    /app/temp \
    && chown -R flextime:flextime /app

# Set security-conscious environment variables
ENV NODE_ENV=production \
    PORT=3001 \
    USER=flextime \
    HOME=/app \
    PATH=/app/node_modules/.bin:$PATH

# Switch to non-root user
USER flextime

WORKDIR /app/backend

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3001/api/status || exit 1

# Expose port
EXPOSE 3001

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "index.js"]

# Stage 4: Development (for local development)
FROM base AS development

# Install additional development tools
RUN apk add --no-cache \
    git \
    python3 \
    py3-pip \
    make \
    g++

# Copy everything for development
COPY . .

# Install all dependencies including dev dependencies
RUN cd backend && npm install

# Create directories
RUN mkdir -p \
    /app/logs \
    /app/data \
    /app/temp \
    && chown -R flextime:flextime /app

ENV NODE_ENV=development \
    PORT=3001

USER flextime
WORKDIR /app/backend

EXPOSE 3001

# Development command with nodemon for hot reload
CMD ["npm", "run", "dev"]