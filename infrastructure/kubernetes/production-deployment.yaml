# FlexTime Production Deployment - Complete Configuration
# Following [Playbook: Production Readiness] specifications
---
# ConfigMap for production environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: flextime-config
  namespace: flextime-production
  labels:
    app: flextime
    environment: production
data:
  NODE_ENV: "production"
  PORT: "3005"
  LOG_LEVEL: "info"
  # Configurable worker scaling (updated from hardcoded 20)
  MAX_WORKERS_PER_TASK: "15"
  MAX_PARALLEL_OPERATIONS: "15"
  USE_PARALLEL_SCHEDULING: "true"
  # Database configuration
  DB_POOL_MAX: "100"
  DB_POOL_MIN: "10"
  # Redis configuration
  REDIS_TTL: "3600"
  REDIS_MAX_MEMORY: "512mb"
  # Feature flags
  ENABLE_SPORT_SPECIFIC_PATTERNS: "true"
  ENABLE_INTER_SPORT_CORRELATIONS: "true"
  ENABLE_SEASONAL_VARIANCE: "true"
  GENERATE_VISUALIZATIONS: "true"
  GENERATE_AI_INSIGHTS: "true"
  # Monitoring
  PROMETHEUS_ENABLED: "true"
  METRICS_ENDPOINT: "/metrics"

---
# Secret for sensitive production data
apiVersion: v1
kind: Secret
metadata:
  name: flextime-secrets
  namespace: flextime-production
  labels:
    app: flextime
    environment: production
type: Opaque
stringData:
  NEON_DATABASE_URL: "REPLACE_WITH_PRODUCTION_DATABASE_URL"
  REDIS_URL: "redis://redis-service:6379"
  JWT_SECRET: "REPLACE_WITH_PRODUCTION_JWT_SECRET"
  ANTHROPIC_API_KEY: "REPLACE_WITH_PRODUCTION_ANTHROPIC_KEY"
  NOTION_API_TOKEN: "REPLACE_WITH_PRODUCTION_NOTION_TOKEN"

---
# Main API Deployment with enhanced configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flextime-api
  namespace: flextime-production
  labels:
    app: flextime
    component: api
    environment: production
  annotations:
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: flextime
      component: api
  template:
    metadata:
      labels:
        app: flextime
        component: api
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3005"
        prometheus.io/path: "/metrics"
        # Force restart on config changes
        configmap.reloader.stakater.com/reload: "flextime-config"
        secret.reloader.stakater.com/reload: "flextime-secrets"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: flextime-api
        image: flextime/api:v2.1.0-scaled
        imagePullPolicy: Always
        ports:
        - containerPort: 3005
          name: http
          protocol: TCP
        env:
        - name: WORKER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - configMapRef:
            name: flextime-config
        - secretRef:
            name: flextime-secrets
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 3005
            httpHeaders:
            - name: User-Agent
              value: "k8s-liveness-probe"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /api/status
            port: 3005
            httpHeaders:
            - name: User-Agent
              value: "k8s-readiness-probe"
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 3005
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: temp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: temp
        emptyDir:
          sizeLimit: 500Mi
      - name: cache
        emptyDir:
          sizeLimit: 2Gi
      nodeSelector:
        kubernetes.io/os: linux
        node-type: worker
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - flextime
                - key: component
                  operator: In
                  values:
                  - api
              topologyKey: kubernetes.io/hostname

---
# API Service with Load Balancer
apiVersion: v1
kind: Service
metadata:
  name: flextime-api-service
  namespace: flextime-production
  labels:
    app: flextime
    component: api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold: "3"
spec:
  type: LoadBalancer
  sessionAffinity: None
  ports:
  - port: 80
    targetPort: 3005
    protocol: TCP
    name: http
  - port: 443
    targetPort: 3005
    protocol: TCP
    name: https
  selector:
    app: flextime
    component: api

---
# Horizontal Pod Autoscaler with enhanced metrics
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: flextime-api-hpa
  namespace: flextime-production
  labels:
    app: flextime
    component: api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: flextime-api
  minReplicas: 4
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 65
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600  # 10 minutes
      policies:
      - type: Percent
        value: 25
        periodSeconds: 300  # 5 minutes
      - type: Pods
        value: 2
        periodSeconds: 300
    scaleUp:
      stabilizationWindowSeconds: 180  # 3 minutes
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: flextime-api-pdb
  namespace: flextime-production
  labels:
    app: flextime
    component: api
spec:
  minAvailable: 3
  selector:
    matchLabels:
      app: flextime
      component: api

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: flextime-api-netpol
  namespace: flextime-production
  labels:
    app: flextime
    component: api
spec:
  podSelector:
    matchLabels:
      app: flextime
      component: api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: flextime
    ports:
    - protocol: TCP
      port: 3005
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: UDP
      port: 53   # DNS