# FlexTime Security and Secrets Management
# Production-ready security configuration with secrets management
---
# Security namespace
apiVersion: v1
kind: Namespace
metadata:
  name: flextime-security
  labels:
    name: flextime-security
    purpose: security-management
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# External Secrets Operator for managing secrets from external systems
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-operator
  namespace: flextime-security

---
# ClusterRole for External Secrets Operator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-operator
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list", "create", "update", "patch", "delete", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["external-secrets.io"]
  resources: ["*"]
  verbs: ["*"]

---
# ClusterRoleBinding for External Secrets Operator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-operator
subjects:
- kind: ServiceAccount
  name: external-secrets-operator
  namespace: flextime-security

---
# AWS Secrets Manager SecretStore
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: flextime-production
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa
            namespace: flextime-production

---
# Service Account for accessing AWS Secrets Manager
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: flextime-production
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/FlexTimeSecretsRole"

---
# External Secret for database credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: flextime-production
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: flextime-database-secret
    creationPolicy: Owner
  data:
  - secretKey: NEON_DATABASE_URL
    remoteRef:
      key: flextime/production/database
      property: connection_url
  - secretKey: NEON_DB_USER
    remoteRef:
      key: flextime/production/database
      property: username
  - secretKey: NEON_DB_PASSWORD
    remoteRef:
      key: flextime/production/database
      property: password

---
# External Secret for API keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: api-keys
  namespace: flextime-production
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: flextime-api-keys
    creationPolicy: Owner
  data:
  - secretKey: ANTHROPIC_API_KEY
    remoteRef:
      key: flextime/production/api-keys
      property: anthropic_key
  - secretKey: NOTION_API_TOKEN
    remoteRef:
      key: flextime/production/api-keys
      property: notion_token
  - secretKey: JWT_SECRET
    remoteRef:
      key: flextime/production/security
      property: jwt_secret

---
# Network Policy for production security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: flextime-production-netpol
  namespace: flextime-production
  labels:
    app: flextime
    security-level: production
spec:
  podSelector: {}  # Apply to all pods in namespace
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3005
  # Allow ingress from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: flextime-monitoring
    ports:
    - protocol: TCP
      port: 3005
  # Allow inter-pod communication within namespace
  - from:
    - podSelector: {}
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow HTTPS outbound (for external APIs)
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow database connections
  - to: []
    ports:
    - protocol: TCP
      port: 5432
  # Allow Redis connections
  - to:
    - namespaceSelector:
        matchLabels:
          name: flextime-production
    ports:
    - protocol: TCP
      port: 6379

---
# Pod Security Policy (deprecated but shown for reference)
# Use Pod Security Standards instead
apiVersion: v1
kind: ConfigMap
metadata:
  name: pod-security-standards
  namespace: flextime-production
data:
  policy.yaml: |
    # Pod Security Standards Configuration
    # Apply restricted security context to all pods
    securityContext:
      runAsNonRoot: true
      runAsUser: 1001
      fsGroup: 1001
      seccompProfile:
        type: RuntimeDefault
    containers:
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1001
        capabilities:
          drop:
          - ALL

---
# Certificate management with cert-manager
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt-production
  namespace: flextime-production
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: ops@flextime.app
    privateKeySecretRef:
      name: letsencrypt-production
    solvers:
    - http01:
        ingress:
          class: nginx

---
# TLS Certificate for production domain
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: flextime-tls
  namespace: flextime-production
spec:
  secretName: flextime-tls-secret
  issuerRef:
    name: letsencrypt-production
    kind: Issuer
  dnsNames:
  - api.flextime.app
  - app.flextime.app
  - flextime.app

---
# Ingress with TLS termination
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flextime-ingress
  namespace: flextime-production
  labels:
    app: flextime
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/issuer: "letsencrypt-production"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'";
spec:
  tls:
  - hosts:
    - api.flextime.app
    - app.flextime.app
    secretName: flextime-tls-secret
  rules:
  - host: api.flextime.app
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: flextime-api-service
            port:
              number: 80
  - host: app.flextime.app
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: flextime-api-service
            port:
              number: 80

---
# RBAC for FlexTime API service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flextime-api-sa
  namespace: flextime-production
  labels:
    app: flextime
    component: api

---
# Role for FlexTime API (minimal permissions)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: flextime-api-role
  namespace: flextime-production
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
  resourceNames: [] # Restrict to specific pods if needed

---
# RoleBinding for FlexTime API
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: flextime-api-rolebinding
  namespace: flextime-production
subjects:
- kind: ServiceAccount
  name: flextime-api-sa
  namespace: flextime-production
roleRef:
  kind: Role
  name: flextime-api-role
  apiGroup: rbac.authorization.k8s.io

---
# Security scanning with Falco (security monitoring)
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-config
  namespace: flextime-security
data:
  falco.yaml: |
    rules_file:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/falco_rules.local.yaml
      - /etc/falco/k8s_audit_rules.yaml
      - /etc/falco/rules.d
    
    time_format_iso_8601: true
    json_output: true
    json_include_output_property: true
    json_include_tags_property: true
    
    log_stderr: true
    log_syslog: false
    log_level: info
    
    priority: debug
    
    outputs:
      rate: 1
      max_burst: 1000
    
    syslog_output:
      enabled: false
    
    file_output:
      enabled: true
      keep_alive: false
      filename: /var/log/falco/events.txt
    
    stdout_output:
      enabled: true
    
    webserver:
      enabled: true
      listen_port: 8765
      k8s_healthz_endpoint: /healthz
      ssl_enabled: false
      ssl_certificate: /etc/ssl/falco/server.pem

---
# OPA Gatekeeper constraint templates for security policies
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredsecuritycontext
  namespace: flextime-security
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredSecurityContext
      validation:
        type: object
        properties:
          runAsNonRoot:
            type: boolean
          runAsUser:
            type: integer
          readOnlyRootFilesystem:
            type: boolean
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredsecuritycontext
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.runAsNonRoot
          msg := "Container must run as non-root user"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.readOnlyRootFilesystem
          msg := "Container must use read-only root filesystem"
        }

---
# Security context constraint
apiVersion: k8srequiredsecuritycontext.gatekeeper.sh/v1beta1
kind: K8sRequiredSecurityContext
metadata:
  name: require-security-context
  namespace: flextime-production
spec:
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet", "DaemonSet"]
    namespaces: ["flextime-production"]
  parameters:
    runAsNonRoot: true
    runAsUser: 1001
    readOnlyRootFilesystem: true

---
# Image scanning policy with OPA Gatekeeper
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sallowedrepos
  namespace: flextime-security
spec:
  crd:
    spec:
      names:
        kind: K8sAllowedRepos
      validation:
        type: object
        properties:
          repos:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sallowedrepos
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not starts_with(container.image, input.parameters.repos[_])
          msg := sprintf("Container image %v is not from an allowed repository", [container.image])
        }

---
# Allowed repositories constraint
apiVersion: k8sallowedrepos.gatekeeper.sh/v1beta1
kind: K8sAllowedRepos
metadata:
  name: allowed-repos
  namespace: flextime-production
spec:
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet", "DaemonSet"]
    namespaces: ["flextime-production"]
  parameters:
    repos:
      - "flextime/"
      - "redis:"
      - "postgres:"
      - "nginx:"
      - "gcr.io/distroless/"