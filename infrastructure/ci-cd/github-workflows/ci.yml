# CI/CD Pipeline for FlexTime Platform
name: FlexTime CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/*', 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: big12/flextime

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: flextime_test
          POSTGRES_USER: flextime
          POSTGRES_PASSWORD: testpassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Run backend linting
      run: |
        cd backend
        npm run lint

    - name: Run backend tests
      run: |
        cd backend
        npm test
      env:
        NODE_ENV: test
        REDIS_URL: redis://localhost:6379
        NEON_DB_CONNECTION_STRING: postgresql://flextime:testpassword@localhost:5432/flextime_test

    - name: Generate backend test coverage
      run: |
        cd backend
        npm run test:coverage

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Python Service Testing
  python-test:
    name: Python Services Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpq-dev

    - name: Install Python dependencies
      run: |
        cd backend/python/intelligence_engine
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy

    - name: Run Python linting
      run: |
        cd backend/python/intelligence_engine
        black --check .
        flake8 .

    - name: Run Python type checking
      run: |
        cd backend/python/intelligence_engine
        mypy . || true  # Allow failures for now

    - name: Run Python tests
      run: |
        cd backend/python/intelligence_engine
        pytest --cov=. --cov-report=xml

    - name: Upload Python coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/python/intelligence_engine/coverage.xml
        flags: python
        name: python-coverage

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, python-test]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        service: [api-svc, scheduler-svc, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/Dockerfile.${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production

  # End-to-End Testing
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start test environment
      run: |
        docker compose -f infrastructure/docker/docker-compose.microservices.yml up -d
        sleep 60  # Wait for services to be ready

    - name: Run E2E tests
      run: |
        cd frontend
        npm ci
        npm run test:e2e

    - name: Cleanup test environment
      if: always()
      run: |
        docker compose -f infrastructure/docker/docker-compose.microservices.yml down -v

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, e2e-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.flextime.big12.org
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      run: |
        kubectl apply -f infrastructure/kubernetes/ -n flextime-staging
        kubectl set image deployment/api-svc api-svc=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-api-svc:develop -n flextime-staging
        kubectl set image deployment/scheduler-svc scheduler-svc=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-scheduler-svc:develop -n flextime-staging
        kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-frontend:develop -n flextime-staging
        kubectl rollout status deployment/api-svc -n flextime-staging --timeout=300s
        kubectl rollout status deployment/scheduler-svc -n flextime-staging --timeout=300s
        kubectl rollout status deployment/frontend -n flextime-staging --timeout=300s

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://flextime.big12.org
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Deploy to production
      run: |
        kubectl apply -f infrastructure/kubernetes/ -n flextime-production
        kubectl set image deployment/api-svc api-svc=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-api-svc:latest -n flextime-production
        kubectl set image deployment/scheduler-svc scheduler-svc=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-scheduler-svc:latest -n flextime-production
        kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-frontend:latest -n flextime-production
        kubectl rollout status deployment/api-svc -n flextime-production --timeout=300s
        kubectl rollout status deployment/scheduler-svc -n flextime-production --timeout=300s
        kubectl rollout status deployment/frontend -n flextime-production --timeout=300s

    - name: Run smoke tests
      run: |
        curl -f https://flextime.big12.org/api/status
        curl -f https://flextime.big12.org/health

  # Notify teams
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#flextime-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}