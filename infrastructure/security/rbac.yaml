# Role-Based Access Control (RBAC) for FlexTime Platform
# Service Accounts for FlexTime services
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flextime-api-svc
  namespace: flextime-production
  labels:
    app: flextime
    component: api-svc
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flextime-scheduler-svc
  namespace: flextime-production
  labels:
    app: flextime
    component: scheduler-svc
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flextime-notification-svc
  namespace: flextime-production
  labels:
    app: flextime
    component: notification-svc

---
# Roles for specific namespace operations
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: flextime-production
  name: flextime-app-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
# Role for scheduler service (additional permissions)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: flextime-production
  name: flextime-scheduler-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
# RoleBindings
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: flextime-api-svc-binding
  namespace: flextime-production
subjects:
- kind: ServiceAccount
  name: flextime-api-svc
  namespace: flextime-production
roleRef:
  kind: Role
  name: flextime-app-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: flextime-scheduler-svc-binding
  namespace: flextime-production
subjects:
- kind: ServiceAccount
  name: flextime-scheduler-svc
  namespace: flextime-production
roleRef:
  kind: Role
  name: flextime-scheduler-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: flextime-notification-svc-binding
  namespace: flextime-production
subjects:
- kind: ServiceAccount
  name: flextime-notification-svc
  namespace: flextime-production
roleRef:
  kind: Role
  name: flextime-app-role
  apiGroup: rbac.authorization.k8s.io

---
# ClusterRole for monitoring access
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flextime-monitoring
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# Network Policies for security isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: flextime-default-deny
  namespace: flextime-production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: flextime-api-ingress
  namespace: flextime-production
spec:
  podSelector:
    matchLabels:
      component: api-svc
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3001
  - from:
    - podSelector:
        matchLabels:
          app: flextime
    ports:
    - protocol: TCP
      port: 3001
  egress:
  - to:
    - podSelector:
        matchLabels:
          component: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          component: scheduler-svc
    ports:
    - protocol: TCP
      port: 4000
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS outbound
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: UDP
      port: 53   # DNS

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: flextime-scheduler-policy
  namespace: flextime-production
spec:
  podSelector:
    matchLabels:
      component: scheduler-svc
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: api-svc
    ports:
    - protocol: TCP
      port: 4000
  egress:
  - to:
    - podSelector:
        matchLabels:
          component: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS outbound
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: UDP
      port: 53   # DNS

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: flextime-redis-policy
  namespace: flextime-production
spec:
  podSelector:
    matchLabels:
      component: redis
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: flextime
    ports:
    - protocol: TCP
      port: 6379

---
# Pod Security Policy (deprecated in K8s 1.25+, use Pod Security Standards instead)
# Pod Security Standards configuration via namespace labels
# This is applied to the namespace, not as a separate resource
# kubectl label namespace flextime-production pod-security.kubernetes.io/enforce=restricted
# kubectl label namespace flextime-production pod-security.kubernetes.io/audit=restricted
# kubectl label namespace flextime-production pod-security.kubernetes.io/warn=restricted

---
# Security Context Constraints for OpenShift (if applicable)
# Sealed Secrets for production secret management
apiVersion: v1
kind: ConfigMap
metadata:
  name: sealed-secrets-setup
  namespace: flextime-production
data:
  setup.sh: |
    #!/bin/bash
    # Install sealed-secrets controller
    kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.0/controller.yaml
    
    # Create SealedSecret custom resources for production secrets
    echo "Use 'kubeseal' to encrypt secrets for production deployment"
    echo "Example: echo -n mypassword | kubectl create secret generic mysecret --dry-run=client --from-file=password=/dev/stdin -o yaml | kubeseal -o yaml"

---
# AuthorizationPolicy for OAuth2/OIDC integration
apiVersion: v1
kind: ConfigMap
metadata:
  name: oauth2-proxy-config
  namespace: flextime-production
data:
  oauth2_proxy.cfg: |
    # OAuth2 Proxy configuration for Big 12 SSO
    http_address = "0.0.0.0:4180"
    upstreams = [
      "http://api-svc-service:80/"
    ]
    
    # OIDC configuration
    provider = "oidc"
    oidc_issuer_url = "https://auth.big12.org"
    client_id = "flextime-production"
    client_secret_file = "/etc/oauth2/client-secret"
    
    # Session configuration
    cookie_secret_file = "/etc/oauth2/cookie-secret"
    cookie_secure = true
    cookie_samesite = "strict"
    cookie_httponly = true
    cookie_expire = "24h"
    
    # Security headers
    set_xauthrequest = true
    set_authorization_header = true
    pass_access_token = true
    pass_user_headers = true
    
    # Allowed email domains
    email_domains = [
      "big12.org",
      "*.big12.org"
    ]
    
    # Skip authentication for health checks
    skip_auth_regex = [
      "^/api/status",
      "^/api/health"
    ]

---
# Security scanning and compliance
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-policies
  namespace: flextime-production
data:
  falco-rules.yaml: |
    - rule: Detect privileged containers
      desc: Detect containers running with privileged flag
      condition: spawned_process and container and k8s.pod.name startswith "flextime-"
      output: Privileged container spawned (user=%user.name container=%container.name)
      priority: WARNING
    
    - rule: Detect sensitive file access
      desc: Detect access to sensitive files
      condition: open_read and k8s.pod.name startswith "flextime-" and (fd.name startswith /etc/shadow or fd.name startswith /etc/passwd)
      output: Sensitive file opened for reading (user=%user.name file=%fd.name)
      priority: WARNING
  
  pod-security-policy.yaml: |
    # Pod Security Standards equivalent policies
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: pod-security-standards
    data:
      restricted: |
        # Restricted Pod Security Standard
        allowPrivilegeEscalation: false
        allowedCapabilities: []
        allowedHostPaths: []
        allowedProcMountTypes: ["Default"]
        allowedUnsafeSysctls: []
        defaultAddCapabilities: []
        defaultAllowPrivilegeEscalation: false
        forbiddenSysctls: ["*"]
        fsGroup:
          ranges:
          - max: 65535
            min: 1
          rule: MustRunAs
        readOnlyRootFilesystem: true
        requiredDropCapabilities: ["ALL"]
        runAsGroup:
          ranges:
          - max: 65535
            min: 1
          rule: MustRunAs
        runAsUser:
          rule: MustRunAsNonRoot
        seLinux:
          rule: RunAsAny
        seccompProfile:
          allowedProfiles: ["RuntimeDefault", "Localhost"]
          defaultProfile: RuntimeDefault
        supplementalGroups:
          ranges:
          - max: 65535
            min: 1
          rule: MustRunAs