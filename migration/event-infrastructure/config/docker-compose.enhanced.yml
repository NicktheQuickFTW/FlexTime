# Enhanced Docker Compose Configuration for FlexTime Event Streaming Infrastructure
# This file extends the existing docker-compose.yml with Redis Streams capabilities

version: '3.8'

services:
  # Enhanced Redis Configuration for Event Streaming
  redis-streams:
    image: redis:7-alpine
    container_name: flextime-redis-streams
    command: >
      redis-server 
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --stream-node-max-bytes 4096
      --stream-node-max-entries 100
    volumes:
      - redis_streams_data:/data
      - ./redis-streams.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    networks:
      - flextime-network
    environment:
      - REDIS_PASSWORD=${REDIS_STREAMS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Sentinel for HA (optional for production)
  redis-sentinel:
    image: redis:7-alpine
    container_name: flextime-redis-sentinel
    command: >
      redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    ports:
      - "26379:26379"
    networks:
      - flextime-network
    depends_on:
      - redis-streams
    profiles:
      - production
      - ha

  # Event Streaming Infrastructure Service
  event-infrastructure:
    build:
      context: .
      dockerfile: Dockerfile.event-infrastructure
    container_name: flextime-event-infrastructure
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      
      # Redis Streams Configuration
      REDIS_STREAMS_HOST: redis-streams
      REDIS_STREAMS_PORT: 6379
      REDIS_STREAMS_PASSWORD: ${REDIS_STREAMS_PASSWORD:-}
      REDIS_STREAMS_DB: 0
      REDIS_STREAMS_PREFIX: "flextime:stream:"
      REDIS_CONSUMER_GROUP: "flextime-workers"
      REDIS_CONSUMER_NAME: "worker-${HOSTNAME:-local}"
      REDIS_MAX_STREAM_LENGTH: 50000
      
      # Monitoring Configuration
      MONITORING_INTERVAL: 30000
      ALERT_LAG_THRESHOLD: 1000
      ALERT_ERROR_RATE_THRESHOLD: 0.05
      ALERT_CONSUMER_IDLE_THRESHOLD: 300000
      
      # Integration with existing FlexTime services
      FLEXTIME_API_URL: http://backend:3001
      FLEXTIME_FRONTEND_URL: http://frontend:3000
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
      
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    ports:
      - "3010:3010"  # Event infrastructure management API
    networks:
      - flextime-network
    depends_on:
      redis-streams:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # Stream Monitoring Dashboard (optional)
  stream-dashboard:
    image: redis/redisinsight:latest
    container_name: flextime-stream-dashboard
    ports:
      - "8001:8001"
    networks:
      - flextime-network
    depends_on:
      - redis-streams
    profiles:
      - development
      - monitoring

  # Updated backend service to include event streaming
  backend:
    environment:
      # Existing environment variables...
      
      # Event Streaming Configuration
      ENABLE_EVENT_STREAMING: ${ENABLE_EVENT_STREAMING:-true}
      EVENT_INFRASTRUCTURE_URL: http://event-infrastructure:3010
      REDIS_STREAMS_HOST: redis-streams
      REDIS_STREAMS_PORT: 6379
      REDIS_STREAMS_PASSWORD: ${REDIS_STREAMS_PASSWORD:-}
      
      # Event Publishing Configuration
      PUBLISH_SCHEDULE_EVENTS: ${PUBLISH_SCHEDULE_EVENTS:-true}
      PUBLISH_GAME_EVENTS: ${PUBLISH_GAME_EVENTS:-true}
      PUBLISH_OPTIMIZATION_EVENTS: ${PUBLISH_OPTIMIZATION_EVENTS:-true}
      PUBLISH_COMPASS_EVENTS: ${PUBLISH_COMPASS_EVENTS:-true}
      
    depends_on:
      redis:
        condition: service_healthy
      redis-streams:
        condition: service_healthy
      event-infrastructure:
        condition: service_healthy

volumes:
  redis_streams_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis-streams

networks:
  flextime-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Configuration for different environments
x-redis-common: &redis-common
  image: redis:7-alpine
  networks:
    - flextime-network
  healthcheck:
    test: ["CMD", "redis-cli", "ping"]
    interval: 10s
    timeout: 5s
    retries: 5

# Development overrides
# Use: docker-compose -f docker-compose.yml -f docker-compose.enhanced.yml -f docker-compose.dev.yml up
x-development-config:
  redis-streams:
    <<: *redis-common
    environment:
      - REDIS_MAXMEMORY=512mb
    command: >
      redis-server 
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
  
  event-infrastructure:
    environment:
      - LOG_LEVEL=debug
      - MONITORING_INTERVAL=10000  # More frequent monitoring in dev

# Production overrides  
# Use: docker-compose -f docker-compose.yml -f docker-compose.enhanced.yml -f docker-compose.prod.yml up
x-production-config:
  redis-streams:
    <<: *redis-common
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'
    environment:
      - REDIS_MAXMEMORY=3gb
      - REDIS_PASSWORD=${REDIS_STREAMS_PASSWORD}
    
  event-infrastructure:
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=warn