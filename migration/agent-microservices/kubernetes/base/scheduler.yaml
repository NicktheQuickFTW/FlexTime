apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduler
  namespace: flextime-agents
  labels:
    app: scheduler
    component: core
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: scheduler
  template:
    metadata:
      labels:
        app: scheduler
        component: core
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "3002"
    spec:
      serviceAccountName: flextime-agents
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: scheduler
        image: flextime/scheduler:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3002
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3002"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: scheduler-url
        - name: COMMUNICATION_HUB_URL
          value: "http://communication-hub:3001"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: scheduler-config
              key: log-level
        - name: MAX_CONCURRENT_JOBS
          valueFrom:
            configMapKeyRef:
              name: scheduler-config
              key: max-concurrent-jobs
        - name: SCHEDULE_TIMEOUT_MS
          valueFrom:
            configMapKeyRef:
              name: scheduler-config
              key: schedule-timeout
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: logs
        emptyDir: {}
      - name: data
        emptyDir:
          sizeLimit: 1Gi
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: scheduler
  namespace: flextime-agents
  labels:
    app: scheduler
    component: core
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "3002"
spec:
  type: ClusterIP
  ports:
  - port: 3002
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: scheduler
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: scheduler-hpa
  namespace: flextime-agents
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: scheduler
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: scheduler-scaledobject
  namespace: flextime-agents
spec:
  scaleTargetRef:
    name: scheduler
  minReplicaCount: 2
  maxReplicaCount: 15
  triggers:
  - type: redis
    metadata:
      address: redis.flextime-agents.svc.cluster.local:6379
      listName: schedule_jobs
      listLength: '5'
      enableTLS: 'false'
  - type: prometheus
    metadata:
      serverAddress: http://prometheus.monitoring.svc.cluster.local:9090
      metricName: flextime_scheduler_pending_jobs
      threshold: '10'
      query: sum(flextime_scheduler_pending_jobs{namespace="flextime-agents"})
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scheduler-config
  namespace: flextime-agents
  labels:
    app: scheduler
    component: core
data:
  log-level: "info"
  max-concurrent-jobs: "10"
  schedule-timeout: "300000"
  optimization-algorithms: "simulated_annealing,genetic_algorithm"
  enable-ml-optimization: "true"
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: scheduler-pdb
  namespace: flextime-agents
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: scheduler