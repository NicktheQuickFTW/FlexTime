# Docker Compose for local development and testing
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: flextime-postgres
    environment:
      POSTGRES_DB: flextime_dev
      POSTGRES_USER: flextime
      POSTGRES_PASSWORD: flextime_dev_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - flextime-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flextime -d flextime_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: flextime-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - flextime-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Flextime Backend API
  backend:
    build:
      context: ../../
      dockerfile: Dockerfile.backend
    container_name: flextime-backend
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://flextime:flextime_dev_password@postgres:5432/flextime_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-key
      - NOTION_API_KEY=${NOTION_API_KEY}
      - LOG_LEVEL=debug
    ports:
      - "3000:3000"
    networks:
      - flextime-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../src:/app/src
      - ../../package.json:/app/package.json
      - ../../package-lock.json:/app/package-lock.json
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flextime Frontend
  frontend:
    build:
      context: ../../
      dockerfile: Dockerfile.frontend
    container_name: flextime-frontend
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:3000/api
    ports:
      - "3001:80"
    networks:
      - flextime-network
    depends_on:
      - backend
    volumes:
      - ../../frontend/src:/app/src
      - ../../frontend/public:/app/public
      - ../../frontend/package.json:/app/package.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flextime Worker
  worker:
    build:
      context: ../../
      dockerfile: Dockerfile.worker
    container_name: flextime-worker
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://flextime:flextime_dev_password@postgres:5432/flextime_dev
      - REDIS_URL=redis://redis:6379
      - WORKER_CONCURRENCY=2
      - LOG_LEVEL=debug
    networks:
      - flextime-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../src:/app/src
      - ../../package.json:/app/package.json
    command: npm run worker

  # Nginx Load Balancer (optional)
  nginx:
    image: nginx:alpine
    container_name: flextime-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - flextime-network
    depends_on:
      - backend
      - frontend
    profiles:
      - nginx

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: flextime-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - flextime-network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: flextime-grafana
    ports:
      - "3030:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - flextime-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: flextime-jaeger
    ports:
      - "14268:14268"
      - "16686:16686"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - flextime-network
    profiles:
      - monitoring

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: flextime-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - flextime-network
    profiles:
      - development

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: flextime-adminer
    ports:
      - "8080:8080"
    networks:
      - flextime-network
    depends_on:
      - postgres
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  flextime-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16