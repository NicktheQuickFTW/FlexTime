---
# Kubernetes application deployment
- name: Deploy Flextime to Kubernetes
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    k8s_namespace: "flextime-{{ env | default('dev') }}"
    helm_chart_path: "../kubernetes/helm-charts/flextime"
    kubectl_config: "{{ lookup('env', 'KUBECONFIG') | default('~/.kube/config') }}"
    
  tasks:
    - name: Ensure kubectl is configured
      k8s_info:
        api_version: v1
        kind: Node
      register: nodes
      
    - name: Display cluster information
      debug:
        msg: "Connected to cluster with {{ nodes.resources | length }} nodes"
        
    - name: Create namespace
      k8s:
        name: "{{ k8s_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        
    - name: Install cert-manager CRDs
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: cert-manager
        
    - name: Add Helm repositories
      kubernetes.core.helm_repository:
        name: "{{ item.name }}"
        repo_url: "{{ item.url }}"
      loop:
        - name: bitnami
          url: https://charts.bitnami.com/bitnami
        - name: jetstack
          url: https://charts.jetstack.io
        - name: ingress-nginx
          url: https://kubernetes.github.io/ingress-nginx
        - name: prometheus-community
          url: https://prometheus-community.github.io/helm-charts
          
    - name: Update Helm repositories
      kubernetes.core.helm:
        name: dummy
        chart_ref: bitnami/nginx
        release_namespace: kube-system
        state: absent
        
    - name: Install AWS Load Balancer Controller
      kubernetes.core.helm:
        name: aws-load-balancer-controller
        chart_ref: eks/aws-load-balancer-controller
        release_namespace: kube-system
        create_namespace: true
        values:
          clusterName: "{{ eks_cluster_name }}"
          serviceAccount:
            create: false
            name: aws-load-balancer-controller
            
    - name: Install cert-manager
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        release_namespace: cert-manager
        create_namespace: true
        values:
          installCRDs: true
          
    - name: Create ClusterIssuer for Let's Encrypt
      k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              email: "{{ letsencrypt_email }}"
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
              - http01:
                  ingress:
                    class: alb
                    
    - name: Deploy database secrets
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: flextime-secrets
            namespace: "{{ k8s_namespace }}"
          type: Opaque
          stringData:
            database-url: "{{ database_url }}"
            redis-url: "{{ redis_url }}"
            jwt-secret: "{{ jwt_secret }}"
            notion-api-key: "{{ notion_api_key }}"
            
    - name: Deploy PostgreSQL (if external DB not used)
      kubernetes.core.helm:
        name: postgresql
        chart_ref: bitnami/postgresql
        release_namespace: "{{ k8s_namespace }}"
        values:
          auth:
            postgresPassword: "{{ postgres_password }}"
            username: flextime
            password: "{{ postgres_user_password }}"
            database: flextime
          primary:
            persistence:
              enabled: true
              size: 20Gi
              storageClass: gp2
      when: deploy_internal_db | default(false)
      
    - name: Deploy Redis
      kubernetes.core.helm:
        name: redis
        chart_ref: bitnami/redis
        release_namespace: "{{ k8s_namespace }}"
        values:
          auth:
            enabled: true
            password: "{{ redis_password }}"
          master:
            persistence:
              enabled: true
              size: 8Gi
              storageClass: gp2
              
    - name: Deploy Flextime application
      kubernetes.core.helm:
        name: flextime
        chart_ref: "{{ helm_chart_path }}"
        release_namespace: "{{ k8s_namespace }}"
        create_namespace: true
        values:
          image:
            backend:
              tag: "{{ app_version | default('latest') }}"
            frontend:
              tag: "{{ app_version | default('latest') }}"
            worker:
              tag: "{{ app_version | default('latest') }}"
          ingress:
            enabled: true
            hosts:
              - host: "{{ app_domain }}"
                paths:
                  - path: /api
                    pathType: Prefix
                    service: backend
                  - path: /
                    pathType: Prefix
                    service: frontend
            tls:
              - secretName: flextime-tls
                hosts:
                  - "{{ app_domain }}"
          secrets:
            data:
              databaseUrl: "{{ database_url }}"
              redisUrl: "{{ redis_url }}"
              jwtSecret: "{{ jwt_secret }}"
              notionApiKey: "{{ notion_api_key }}"
              
    - name: Wait for deployment to be ready
      k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: flextime-app
        namespace: "{{ k8s_namespace }}"
        wait: true
        wait_condition:
          type: Progressing
          status: "True"
          reason: NewReplicaSetAvailable
        wait_timeout: 600
        
    - name: Get application URL
      k8s_info:
        api_version: networking.k8s.io/v1
        kind: Ingress
        name: flextime-ingress
        namespace: "{{ k8s_namespace }}"
      register: ingress_info
      
    - name: Display deployment information
      debug:
        msg: |
          Flextime deployed successfully!
          Namespace: {{ k8s_namespace }}
          Application URL: https://{{ app_domain }}
          Ingress IP: {{ ingress_info.resources[0].status.loadBalancer.ingress[0].hostname | default('Pending') }}