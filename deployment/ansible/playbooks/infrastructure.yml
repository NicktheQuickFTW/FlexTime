---
# Infrastructure provisioning with Terraform
- name: Provision AWS Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    terraform_dir: "../terraform"
    terraform_state_bucket: "{{ lookup('env', 'TF_STATE_BUCKET') }}"
    terraform_lock_table: "{{ lookup('env', 'TF_LOCK_TABLE') }}"
    aws_region: "{{ lookup('env', 'AWS_REGION') | default('us-east-1') }}"
    environment: "{{ env | default('dev') }}"
  
  tasks:
    - name: Ensure Terraform is installed
      command: terraform version
      register: terraform_version
      failed_when: terraform_version.rc != 0
      
    - name: Check Terraform state bucket exists
      amazon.aws.s3_bucket_info:
        name: "{{ terraform_state_bucket }}"
      register: bucket_info
      
    - name: Create Terraform state bucket if not exists
      amazon.aws.s3_bucket:
        name: "{{ terraform_state_bucket }}"
        region: "{{ aws_region }}"
        versioning: yes
        encryption: "AES256"
        public_access:
          block_public_acls: true
          block_public_policy: true
          ignore_public_acls: true
          restrict_public_buckets: true
      when: bucket_info.buckets | length == 0
      
    - name: Create DynamoDB table for Terraform locks
      amazon.aws.dynamodb_table:
        name: "{{ terraform_lock_table }}"
        hash_key_name: LockID
        hash_key_type: STRING
        region: "{{ aws_region }}"
        billing_mode: PAY_PER_REQUEST
        tags:
          Purpose: terraform-state-lock
          Project: flextime
          Environment: "{{ environment }}"
      
    - name: Initialize Terraform
      terraform:
        project_path: "{{ terraform_dir }}"
        state: present
        force_init: true
        backend_config:
          bucket: "{{ terraform_state_bucket }}"
          key: "flextime/{{ environment }}/terraform.tfstate"
          region: "{{ aws_region }}"
          dynamodb_table: "{{ terraform_lock_table }}"
          encrypt: true
          
    - name: Plan Terraform deployment
      terraform:
        project_path: "{{ terraform_dir }}"
        state: planned
        plan_file: "/tmp/terraform-{{ environment }}.plan"
        variables:
          environment: "{{ environment }}"
          aws_region: "{{ aws_region }}"
          terraform_state_bucket: "{{ terraform_state_bucket }}"
          terraform_lock_table: "{{ terraform_lock_table }}"
          project_name: "flextime"
          domain_name: "{{ domain_name | default('') }}"
          
    - name: Apply Terraform configuration
      terraform:
        project_path: "{{ terraform_dir }}"
        state: present
        plan_file: "/tmp/terraform-{{ environment }}.plan"
      register: terraform_output
      
    - name: Save Terraform outputs
      copy:
        content: "{{ terraform_output.outputs | to_nice_json }}"
        dest: "/tmp/terraform-outputs-{{ environment }}.json"
        
    - name: Display infrastructure information
      debug:
        msg: |
          Infrastructure deployed successfully!
          VPC ID: {{ terraform_output.outputs.vpc_id.value }}
          EKS Cluster: {{ terraform_output.outputs.eks_cluster_name.value }}
          Database Endpoint: {{ terraform_output.outputs.database_endpoint.value }}
          Load Balancer: {{ terraform_output.outputs.alb_dns_name.value }}