# Production environment values for Flextime

replicaCount:
  backend: 3
  frontend: 3
  worker: 2

image:
  backend:
    repository: ghcr.io/big12/flextime
    pullPolicy: IfNotPresent
    tag: "latest-backend"
  frontend:
    repository: ghcr.io/big12/flextime
    pullPolicy: IfNotPresent
    tag: "latest-frontend"
  worker:
    repository: ghcr.io/big12/flextime
    pullPolicy: IfNotPresent
    tag: "latest-worker"

resources:
  backend:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  frontend:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  worker:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

autoscaling:
  enabled: true
  backend:
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  worker:
    minReplicas: 2
    maxReplicas: 8
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 85

ingress:
  enabled: true
  className: "alb"
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:ACCOUNT:certificate/PROD-CERT-ID
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      idle_timeout.timeout_seconds=60,
      routing.http2.enabled=true,
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=flextime-prod-alb-logs,
      access_logs.s3.prefix=flextime-alb
  hosts:
    - host: flextime.big12sports.com
      paths:
        - path: /api
          pathType: Prefix
          service: backend
        - path: /
          pathType: Prefix
          service: frontend
    - host: www.flextime.big12sports.com
      paths:
        - path: /api
          pathType: Prefix
          service: backend
        - path: /
          pathType: Prefix
          service: frontend
  tls:
    - secretName: flextime-prod-tls
      hosts:
        - flextime.big12sports.com
        - www.flextime.big12sports.com

env:
  NODE_ENV: production
  LOG_LEVEL: warn
  CACHE_TTL: 3600

# External dependencies
postgresql:
  enabled: false  # Use external RDS instance

redis:
  enabled: false  # Use external ElastiCache

# External service configurations
externalServices:
  database:
    host: flextime-prod.cluster-xyz.us-east-1.rds.amazonaws.com
    port: 5432
    database: flextime_prod
    username: flextime
  redis:
    host: flextime-prod.abc123.cache.amazonaws.com
    port: 6379

monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    labels:
      release: prometheus
    interval: 30s
    scrapeTimeout: 10s

networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 3000
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 5432
        - protocol: TCP
          port: 6379
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53

podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 2001
  seccompProfile:
    type: RuntimeDefault

# Pod anti-affinity for high availability
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - flextime
      topologyKey: kubernetes.io/hostname
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - flextime
        topologyKey: topology.kubernetes.io/zone

# Node selection
nodeSelector:
  kubernetes.io/arch: amd64
  node.kubernetes.io/instance-type: t3.medium

# Tolerations for dedicated nodes
tolerations:
- key: "dedicated"
  operator: "Equal"
  value: "flextime"
  effect: "NoSchedule"

# Health check configuration
healthcheck:
  backend:
    livenessProbe:
      httpGet:
        path: /health
        port: 3000
      initialDelaySeconds: 60
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
    readinessProbe:
      httpGet:
        path: /ready
        port: 3000
      initialDelaySeconds: 15
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
  frontend:
    livenessProbe:
      httpGet:
        path: /
        port: 80
      initialDelaySeconds: 30
      periodSeconds: 60
      timeoutSeconds: 10
      failureThreshold: 3
    readinessProbe:
      httpGet:
        path: /
        port: 80
      initialDelaySeconds: 10
      periodSeconds: 15
      timeoutSeconds: 5
      failureThreshold: 3