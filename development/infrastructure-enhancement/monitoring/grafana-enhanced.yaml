# Enhanced Grafana Setup with Custom Dashboards and Alerting
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app: grafana
data:
  grafana.ini: |
    [analytics]
    check_for_updates = false
    reporting_enabled = false
    
    [auth]
    disable_login_form = false
    
    [auth.oauth]
    enabled = true
    allow_sign_up = true
    
    [auth.generic_oauth]
    enabled = true
    name = Big12 SSO
    allow_sign_up = true
    client_id = $__env{OAUTH_CLIENT_ID}
    client_secret = $__env{OAUTH_CLIENT_SECRET}
    scopes = openid profile email
    auth_url = https://sso.big12sports.com/auth
    token_url = https://sso.big12sports.com/token
    api_url = https://sso.big12sports.com/userinfo
    role_attribute_path = contains(groups[*], 'admin') && 'Admin' || contains(groups[*], 'editor') && 'Editor' || 'Viewer'
    
    [server]
    domain = grafana.flextime.app
    root_url = https://grafana.flextime.app
    serve_from_sub_path = false
    
    [database]
    type = postgres
    host = $__env{DB_HOST}
    name = $__env{DB_NAME}
    user = $__env{DB_USER}
    password = $__env{DB_PASSWORD}
    ssl_mode = require
    
    [session]
    provider = redis
    provider_config = addr=$__env{REDIS_HOST}:6379,pool_size=100,db=grafana
    
    [security]
    admin_user = $__env{ADMIN_USER}
    admin_password = $__env{ADMIN_PASSWORD}
    secret_key = $__env{SECRET_KEY}
    disable_gravatar = true
    
    [smtp]
    enabled = true
    host = $__env{SMTP_HOST}:587
    user = $__env{SMTP_USER}
    password = $__env{SMTP_PASSWORD}
    from_address = alerts@flextime.app
    from_name = FlexTime Monitoring
    
    [alerting]
    enabled = true
    execute_alerts = true
    
    [unified_alerting]
    enabled = true
    
    [feature_toggles]
    enable = ngalert
    
    [log]
    mode = console
    level = info
    
    [metrics]
    enabled = true
    
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus.monitoring.svc.cluster.local:9090
      isDefault: true
      editable: false
      jsonData:
        httpMethod: POST
        queryTimeout: 60s
        timeInterval: 30s
    - name: Jaeger
      type: jaeger
      access: proxy
      url: http://jaeger-query.monitoring.svc.cluster.local:16686
      editable: false
    - name: Loki
      type: loki
      access: proxy
      url: http://loki.monitoring.svc.cluster.local:3100
      editable: false
    - name: PostgreSQL
      type: postgres
      access: proxy
      url: postgres.flextime-production.svc.cluster.local:5432
      database: flextime
      user: grafana_readonly
      secureJsonData:
        password: $POSTGRES_GRAFANA_PASSWORD
      jsonData:
        sslmode: require
        postgresVersion: 1500
        timescaledb: false
        
  notifiers.yaml: |
    notifiers:
    - name: slack-alerts
      type: slack
      settings:
        url: $SLACK_WEBHOOK_URL
        channel: '#flextime-alerts'
        username: FlexTime Monitoring
        title: FlexTime Alert
        text: |
          {{ range .Alerts }}
          *Alert:* {{ .Summary }}
          *Description:* {{ .Description }}
          *Severity:* {{ .Labels.severity }}
          *Service:* {{ .Labels.service }}
          {{ end }}
    - name: email-alerts
      type: email
      settings:
        addresses: 'ops-team@flextime.app;devops@big12sports.com'
        subject: 'FlexTime Alert: {{ .GroupLabels.alertname }}'

---
# Grafana Dashboards ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
  labels:
    app: grafana
    grafana_dashboard: "1"
data:
  flextime-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "FlexTime Platform Overview",
        "tags": ["flextime", "overview"],
        "timezone": "browser",
        "refresh": "30s",
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "panels": [
          {
            "id": 1,
            "title": "Service Health Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=~\"flextime-.*\"}",
                "legendFormat": "{{ job }}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "green", "value": 1}
                  ]
                },
                "mappings": [
                  {"options": {"0": {"text": "DOWN"}}, "type": "value"},
                  {"options": {"1": {"text": "UP"}}, "type": "value"}
                ]
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"flextime-api\"}[5m])",
                "legendFormat": "{{ method }} {{ status }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Response Time Percentiles",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket{job=\"flextime-api\"}[5m]))",
                "legendFormat": "50th percentile"
              },
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"flextime-api\"}[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.99, rate(http_request_duration_seconds_bucket{job=\"flextime-api\"}[5m]))",
                "legendFormat": "99th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"flextime-api\",status=~\"5..\"}[5m]) / rate(http_requests_total{job=\"flextime-api\"}[5m]) * 100",
                "legendFormat": "Error Rate %"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 5,
            "title": "Active Scheduling Jobs",
            "type": "stat",
            "targets": [
              {
                "expr": "scheduling_jobs_active",
                "legendFormat": "Active Jobs"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          }
        ]
      }
    }
    
  flextime-performance.json: |
    {
      "dashboard": {
        "id": null,
        "title": "FlexTime Performance Metrics",
        "tags": ["flextime", "performance"],
        "timezone": "browser",
        "refresh": "10s",
        "time": {
          "from": "now-30m",
          "to": "now"
        },
        "panels": [
          {
            "id": 1,
            "title": "CPU Usage by Service",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{pod=~\"api-svc-.*|scheduler-svc-.*\"}[5m]) * 100",
                "legendFormat": "{{ pod }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Memory Usage by Service",
            "type": "graph",
            "targets": [
              {
                "expr": "container_memory_working_set_bytes{pod=~\"api-svc-.*|scheduler-svc-.*\"} / 1024 / 1024",
                "legendFormat": "{{ pod }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Network I/O",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_network_receive_bytes_total{pod=~\"api-svc-.*|scheduler-svc-.*\"}[5m])",
                "legendFormat": "{{ pod }} - Received"
              },
              {
                "expr": "rate(container_network_transmit_bytes_total{pod=~\"api-svc-.*|scheduler-svc-.*\"}[5m])",
                "legendFormat": "{{ pod }} - Transmitted"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          }
        ]
      }
    }

  flextime-business.json: |
    {
      "dashboard": {
        "id": null,
        "title": "FlexTime Business Metrics",
        "tags": ["flextime", "business"],
        "timezone": "browser",
        "refresh": "1m",
        "time": {
          "from": "now-24h",
          "to": "now"
        },
        "panels": [
          {
            "id": 1,
            "title": "Schedules Generated (24h)",
            "type": "stat",
            "targets": [
              {
                "expr": "increase(schedules_generated_total[24h])",
                "legendFormat": "Total Schedules"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Active Users",
            "type": "stat",
            "targets": [
              {
                "expr": "active_users_current",
                "legendFormat": "Current Users"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
          },
          {
            "id": 3,
            "title": "Schedule Generation Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(schedule_generation_duration_seconds_bucket[5m]))",
                "legendFormat": "95th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 4,
            "title": "Teams by Conference",
            "type": "piechart",
            "targets": [
              {
                "expr": "teams_by_conference",
                "legendFormat": "{{ conference }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 5,
            "title": "Schedule Conflicts Resolved",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(schedule_conflicts_resolved_total[5m])",
                "legendFormat": "Conflicts Resolved/sec"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ]
      }
    }

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      serviceAccountName: grafana
      securityContext:
        fsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - grafana
              topologyKey: kubernetes.io/hostname
      containers:
      - name: grafana
        image: grafana/grafana:10.2.2
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: GF_PATHS_DATA
          value: /var/lib/grafana
        - name: GF_PATHS_LOGS
          value: /var/log/grafana
        - name: GF_PATHS_PLUGINS
          value: /var/lib/grafana/plugins
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        envFrom:
        - secretRef:
            name: grafana-secrets
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
            ephemeral-storage: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
            ephemeral-storage: 5Gi
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
          periodSeconds: 30
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 472
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: grafana-config
          items:
          - key: datasources.yaml
            path: datasources.yaml
      nodeSelector:
        kubernetes.io/os: linux

---
# Grafana Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: monitoring

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    name: http
    protocol: TCP
  selector:
    app: grafana

---
# Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: gp3

---
# Grafana Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
spec:
  tls:
  - hosts:
    - grafana.flextime.app
    secretName: grafana-tls
  rules:
  - host: grafana.flextime.app
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000

---
# Grafana Secret (Template)
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  namespace: monitoring
type: Opaque
stringData:
  ADMIN_USER: admin
  ADMIN_PASSWORD: CHANGE_ME
  SECRET_KEY: CHANGE_ME_TO_RANDOM_STRING
  DB_HOST: postgres.flextime-production.svc.cluster.local
  DB_NAME: flextime
  DB_USER: grafana
  DB_PASSWORD: CHANGE_ME
  REDIS_HOST: redis.flextime-production.svc.cluster.local
  OAUTH_CLIENT_ID: CHANGE_ME
  OAUTH_CLIENT_SECRET: CHANGE_ME
  SMTP_HOST: smtp.gmail.com
  SMTP_USER: alerts@flextime.app
  SMTP_PASSWORD: CHANGE_ME
  SLACK_WEBHOOK_URL: CHANGE_ME
  POSTGRES_GRAFANA_PASSWORD: CHANGE_ME