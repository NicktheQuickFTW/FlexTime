# Enhanced Jaeger Setup for Distributed Tracing
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-config
  namespace: monitoring
  labels:
    app: jaeger
data:
  jaeger.yaml: |
    es:
      server-urls: http://elasticsearch:9200
      username: jaeger
      password: jaeger
      index-prefix: jaeger
      create-index-templates: true
      max-doc-count: 10000000
      num-shards: 5
      num-replicas: 1
      bulk:
        size: 5000000
        workers: 3
        flush-interval: 200ms
    sampling:
      default_strategy:
        type: probabilistic
        param: 0.1
      max_traces_per_second: 1000
    query:
      max-clock-skew-adjustment: 0s
      
  collector.yaml: |
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_http:
            endpoint: 0.0.0.0:14268
          thrift_compact:
            endpoint: 0.0.0.0:6831
          thrift_binary:
            endpoint: 0.0.0.0:6832
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      zipkin:
        endpoint: 0.0.0.0:9411
    
    processors:
      batch:
        timeout: 1s
        send_batch_size: 1024
        send_batch_max_size: 2048
      memory_limiter:
        limit_mib: 512
      resource:
        attributes:
        - key: service.name
          value: flextime
          action: upsert
        - key: deployment.environment
          value: production
          action: upsert
    
    exporters:
      jaeger:
        endpoint: jaeger-collector:14250
        tls:
          insecure: true
      prometheus:
        endpoint: "0.0.0.0:8889"
        const_labels:
          cluster: flextime-production
    
    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679
    
    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        traces:
          receivers: [jaeger, otlp, zipkin]
          processors: [memory_limiter, resource, batch]
          exporters: [jaeger]
        metrics:
          receivers: [otlp]
          processors: [memory_limiter, resource, batch]
          exporters: [prometheus]

---
# Elasticsearch for Jaeger Storage
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: monitoring
  labels:
    app: elasticsearch
spec:
  serviceName: elasticsearch
  replicas: 3
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
        env:
        - name: discovery.type
          value: zen
        - name: discovery.zen.ping.unicast.hosts
          value: "elasticsearch-0.elasticsearch.monitoring.svc.cluster.local,elasticsearch-1.elasticsearch.monitoring.svc.cluster.local,elasticsearch-2.elasticsearch.monitoring.svc.cluster.local"
        - name: discovery.zen.minimum_master_nodes
          value: "2"
        - name: cluster.name
          value: jaeger
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: network.host
          value: "0.0.0.0"
        - name: ES_JAVA_OPTS
          value: "-Xms1g -Xmx1g"
        - name: xpack.security.enabled
          value: "false"
        - name: xpack.ml.enabled
          value: "false"
        - name: xpack.watcher.enabled
          value: "false"
        - name: action.destructive_requires_name
          value: "false"
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 1000m
            memory: 4Gi
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
        livenessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: gp3
      resources:
        requests:
          storage: 100Gi

---
# Elasticsearch Service
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: monitoring
  labels:
    app: elasticsearch
spec:
  clusterIP: None
  ports:
  - port: 9200
    name: http
  - port: 9300
    name: transport
  selector:
    app: elasticsearch

---
# Jaeger Collector
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-collector
  namespace: monitoring
  labels:
    app: jaeger
    component: collector
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: jaeger
      component: collector
  template:
    metadata:
      labels:
        app: jaeger
        component: collector
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14269"
    spec:
      serviceAccountName: jaeger
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - collector
              topologyKey: kubernetes.io/hostname
      containers:
      - name: jaeger-collector
        image: jaegertracing/jaeger-collector:1.51.0
        args:
        - --config-file=/etc/jaeger/collector.yaml
        - --es.server-urls=http://elasticsearch:9200
        - --es.num-shards=5
        - --es.num-replicas=1
        - --es.index-prefix=jaeger
        - --collector.zipkin.host-port=:9411
        - --collector.grpc-server.host-port=:14250
        - --collector.http-server.host-port=:14268
        - --collector.queue-size=2000
        - --collector.num-workers=50
        - --log-level=info
        ports:
        - containerPort: 14250
          name: grpc
          protocol: TCP
        - containerPort: 14268
          name: http
          protocol: TCP
        - containerPort: 9411
          name: zipkin
          protocol: TCP
        - containerPort: 14269
          name: admin
          protocol: TCP
        - containerPort: 4317
          name: otlp-grpc
          protocol: TCP
        - containerPort: 4318
          name: otlp-http
          protocol: TCP
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: jaeger-config
          mountPath: /etc/jaeger
        livenessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 10
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10001
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: jaeger-config
        configMap:
          name: jaeger-config

---
# Jaeger Query (UI)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-query
  namespace: monitoring
  labels:
    app: jaeger
    component: query
spec:
  replicas: 2
  selector:
    matchLabels:
      app: jaeger
      component: query
  template:
    metadata:
      labels:
        app: jaeger
        component: query
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "16687"
    spec:
      serviceAccountName: jaeger
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        fsGroup: 10001
      containers:
      - name: jaeger-query
        image: jaegertracing/jaeger-query:1.51.0
        args:
        - --config-file=/etc/jaeger/jaeger.yaml
        - --es.server-urls=http://elasticsearch:9200
        - --es.index-prefix=jaeger
        - --query.static-files=/go/jaeger-ui/
        - --query.ui-config=/etc/jaeger/ui-config.json
        - --log-level=info
        ports:
        - containerPort: 16686
          name: http
          protocol: TCP
        - containerPort: 16687
          name: admin
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: jaeger-config
          mountPath: /etc/jaeger
        - name: jaeger-ui-config
          mountPath: /etc/jaeger/ui-config.json
          subPath: ui-config.json
        livenessProbe:
          httpGet:
            path: /
            port: 16687
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 16687
          initialDelaySeconds: 10
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10001
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: jaeger-config
        configMap:
          name: jaeger-config
      - name: jaeger-ui-config
        configMap:
          name: jaeger-ui-config

---
# Jaeger Agent (DaemonSet)
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jaeger-agent
  namespace: monitoring
  labels:
    app: jaeger
    component: agent
spec:
  selector:
    matchLabels:
      app: jaeger
      component: agent
  template:
    metadata:
      labels:
        app: jaeger
        component: agent
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14271"
    spec:
      serviceAccountName: jaeger
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
      containers:
      - name: jaeger-agent
        image: jaegertracing/jaeger-agent:1.51.0
        args:
        - --reporter.grpc.host-port=jaeger-collector:14250
        - --agent.tags=cluster=flextime-production,node=${NODE_NAME}
        - --log-level=info
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        ports:
        - containerPort: 6831
          hostPort: 6831
          name: compact
          protocol: UDP
        - containerPort: 6832
          hostPort: 6832
          name: binary
          protocol: UDP
        - containerPort: 5778
          hostPort: 5778
          name: configs
          protocol: TCP
        - containerPort: 14271
          hostPort: 14271
          name: admin
          protocol: TCP
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /
            port: 14271
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 14271
          initialDelaySeconds: 10
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10001
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

---
# Service Account for Jaeger
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jaeger
  namespace: monitoring

---
# Jaeger Services
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: monitoring
  labels:
    app: jaeger
    component: collector
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "14269"
spec:
  type: ClusterIP
  ports:
  - port: 14250
    targetPort: 14250
    name: grpc
    protocol: TCP
  - port: 14268
    targetPort: 14268
    name: http
    protocol: TCP
  - port: 9411
    targetPort: 9411
    name: zipkin
    protocol: TCP
  - port: 4317
    targetPort: 4317
    name: otlp-grpc
    protocol: TCP
  - port: 4318
    targetPort: 4318
    name: otlp-http
    protocol: TCP
  selector:
    app: jaeger
    component: collector

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: monitoring
  labels:
    app: jaeger
    component: query
spec:
  type: ClusterIP
  ports:
  - port: 16686
    targetPort: 16686
    name: http
    protocol: TCP
  selector:
    app: jaeger
    component: query

---
# Jaeger UI Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-ui-config
  namespace: monitoring
data:
  ui-config.json: |
    {
      "monitor": {
        "menuEnabled": true
      },
      "dependencies": {
        "menuEnabled": true
      },
      "archiveEnabled": true,
      "tracking": {
        "gaID": "UA-000000-2",
        "trackErrors": true
      },
      "menu": [
        {
          "label": "FlexTime Docs",
          "url": "https://docs.flextime.app"
        },
        {
          "label": "Grafana",
          "url": "https://grafana.flextime.app"
        }
      ],
      "linkPatterns": [
        {
          "type": "logs",
          "key": "jaeger.traceid",
          "url": "https://grafana.flextime.app/explore?left=%5B%22now-1h%22,%22now%22,%22Loki%22,%7B%22expr%22:%22%7Btrace_id%3D%5C%22#{jaeger.traceid}%5C%22%7D%22%7D%5D"
        }
      ]
    }

---
# Jaeger Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jaeger-ingress
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: jaeger-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Jaeger'
spec:
  tls:
  - hosts:
    - jaeger.flextime.app
    secretName: jaeger-tls
  rules:
  - host: jaeger.flextime.app
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jaeger-query
            port:
              number: 16686

---
# OpenTelemetry Collector for Enhanced Observability
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: monitoring
  labels:
    app: otel-collector
spec:
  replicas: 2
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      serviceAccountName: jaeger
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:0.89.0
        args:
        - --config=/etc/otel/collector.yaml
        ports:
        - containerPort: 4317
          name: otlp-grpc
        - containerPort: 4318
          name: otlp-http
        - containerPort: 8889
          name: prometheus
        - containerPort: 13133
          name: health
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: jaeger-config
          mountPath: /etc/otel
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: jaeger-config
        configMap:
          name: jaeger-config
          items:
          - key: collector.yaml
            path: collector.yaml

---
# OpenTelemetry Collector Service
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: monitoring
  labels:
    app: otel-collector
spec:
  type: ClusterIP
  ports:
  - port: 4317
    targetPort: 4317
    name: otlp-grpc
  - port: 4318
    targetPort: 4318
    name: otlp-http
  - port: 8889
    targetPort: 8889
    name: prometheus
  selector:
    app: otel-collector