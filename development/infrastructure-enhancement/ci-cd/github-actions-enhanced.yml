name: FlexTime Production CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened, ready_for_review]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1
  COSIGN_EXPERIMENTAL: 1

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write
  attestations: write

jobs:
  # Security and Dependency Analysis
  security-audit:
    name: Security Audit & Dependency Check
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
          
    - name: Install dependencies
      run: |
        cd backend && npm ci --only=production
        cd ../frontend && npm ci --only=production
        
    - name: Run npm audit
      run: |
        cd backend && npm audit --audit-level=moderate
        cd ../frontend && npm audit --audit-level=moderate
        
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      id: depcheck
      with:
        project: 'flextime'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
          --exclude '**/node_modules/**'
          --exclude '**/target/**'
          
    - name: Upload OWASP Dependency Check results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/dependency-check-report.sarif
        
    - name: Semgrep Security Scan
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/nodejs
          p/typescript
        generate-sarif-file: true
        sarif-file: semgrep.sarif
        
    - name: Upload Semgrep results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  # Code Quality and Testing
  code-quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service }}/package-lock.json
        
    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        npm ci
        
    - name: Run ESLint
      run: |
        cd ${{ matrix.service }}
        npm run lint -- --format=@microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
      continue-on-error: true
        
    - name: Upload ESLint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: ${{ matrix.service }}/eslint-results.sarif
        wait-for-processing: true
        
    - name: Run Type Check
      if: matrix.service == 'frontend'
      run: |
        cd ${{ matrix.service }}
        npm run type-check
        
    - name: Run Unit Tests
      run: |
        cd ${{ matrix.service }}
        npm run test:coverage
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ${{ matrix.service }}/coverage/lcov.info
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage
        fail_ci_if_error: false
        
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      if: matrix.service == 'backend'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Build and Security Scan Docker Images
  build-and-scan:
    name: Build & Scan Container Images
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality]
    if: always() && (needs.security-audit.result == 'success' || github.event.inputs.force_deploy == 'true')
    strategy:
      matrix:
        service: [api-svc, scheduler-svc, frontend]
    outputs:
      api-svc-image: ${{ steps.image.outputs.api-svc-image }}
      scheduler-svc-image: ${{ steps.image.outputs.scheduler-svc-image }}
      frontend-image: ${{ steps.image.outputs.frontend-image }}
      api-svc-digest: ${{ steps.image.outputs.api-svc-digest }}
      scheduler-svc-digest: ${{ steps.image.outputs.scheduler-svc-digest }}
      frontend-digest: ${{ steps.image.outputs.frontend-digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
          
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        labels: |
          org.opencontainers.image.title=FlexTime ${{ matrix.service }}
          org.opencontainers.image.description=FlexTime scheduling platform ${{ matrix.service }}
          org.opencontainers.image.vendor=FlexTime Team
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/Dockerfile.${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: true
        sbom: true
        
    - name: Set image outputs
      id: image
      run: |
        echo "${{ matrix.service }}-image=${{ steps.meta.outputs.tags }}" >> $GITHUB_OUTPUT
        echo "${{ matrix.service }}-digest=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT
        
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      
    - name: Sign container image
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}@${{ steps.build.outputs.digest }}
        
    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
    - name: Run Trivy vulnerability scanner
      run: |
        trivy image \
          --format sarif \
          --output trivy-results-${{ matrix.service }}.sarif \
          --severity HIGH,CRITICAL \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}@${{ steps.build.outputs.digest }}
          
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-results-${{ matrix.service }}.sarif
        category: trivy-${{ matrix.service }}
        
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      id: grype
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}@${{ steps.build.outputs.digest }}
        fail-build: false
        severity-cutoff: high
        
    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: ${{ steps.grype.outputs.sarif }}
        category: grype-${{ matrix.service }}

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-scan]
    if: always() && needs.build-and-scan.result == 'success'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: flextime_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run database migrations
      run: |
        cd backend
        npm run migrate
      env:
        DATABASE_URL: postgres://testuser:testpass@localhost:5432/flextime_test
        REDIS_URL: redis://localhost:6379
        
    - name: Run integration tests
      run: |
        cd backend
        npm run test:integration
      env:
        DATABASE_URL: postgres://testuser:testpass@localhost:5432/flextime_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
        
    - name: Run E2E tests
      run: |
        cd frontend
        npm ci
        npm run test:e2e
      env:
        API_URL: http://localhost:3001

  # Performance Testing
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always() && needs.integration-tests.result == 'success' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup K6
      run: |
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run performance tests
      run: |
        k6 run tests/performance/load-test.js
        k6 run tests/performance/stress-test.js
        k6 run tests/performance/spike-test.js
      env:
        API_URL: ${{ github.event_name == 'pull_request' && 'http://localhost:3001' || 'https://api-staging.flextime.app' }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: |
      always() && 
      needs.integration-tests.result == 'success' && 
      (github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.flextime.app
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name flextime-staging
        
    - name: Deploy to staging
      run: |
        kubectl set image deployment/api-svc api-svc=${{ needs.build-and-scan.outputs.api-svc-image }} -n flextime-staging
        kubectl set image deployment/scheduler-svc scheduler-svc=${{ needs.build-and-scan.outputs.scheduler-svc-image }} -n flextime-staging
        kubectl rollout status deployment/api-svc -n flextime-staging --timeout=600s
        kubectl rollout status deployment/scheduler-svc -n flextime-staging --timeout=600s
        
    - name: Run smoke tests
      run: |
        sleep 30
        curl -f https://staging.flextime.app/api/health || exit 1
        curl -f https://staging.flextime.app/api/ready || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-tests]
    if: |
      always() && 
      needs.deploy-staging.result == 'success' && 
      needs.performance-tests.result == 'success' && 
      (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://flextime.app
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-west-2
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region us-west-2 --name flextime-production
        
    - name: Blue-Green Deployment
      run: |
        # Create new deployment with green suffix
        kubectl patch deployment api-svc -p '{"spec":{"template":{"metadata":{"labels":{"version":"green"}}}}}' -n flextime-production
        kubectl set image deployment/api-svc api-svc=${{ needs.build-and-scan.outputs.api-svc-image }} -n flextime-production
        
        # Wait for green deployment to be ready
        kubectl rollout status deployment/api-svc -n flextime-production --timeout=600s
        
        # Run health checks
        sleep 60
        kubectl run health-check --image=curlimages/curl --rm -i --restart=Never -- curl -f http://api-svc-service.flextime-production.svc.cluster.local:3001/api/health
        
        # Switch traffic to green deployment
        kubectl patch service api-svc-service -p '{"spec":{"selector":{"version":"green"}}}' -n flextime-production
        
    - name: Post-deployment verification
      run: |
        sleep 30
        curl -f https://flextime.app/api/health || exit 1
        curl -f https://flextime.app/api/ready || exit 1
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: ':rocket: Production deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: ':fire: Production deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security Monitoring
  security-monitoring:
    name: Security Monitoring & Compliance
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [deploy-production]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-west-2
        
    - name: Run compliance check
      run: |
        # Check pod security standards
        kubectl get pods -n flextime-production -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.securityContext}{"\n"}{end}'
        
        # Verify network policies are in place
        kubectl get networkpolicies -n flextime-production
        
        # Check resource limits
        kubectl describe limitrange -n flextime-production
        
    - name: Generate compliance report
      run: |
        echo "# FlexTime Production Compliance Report" > compliance-report.md
        echo "Generated on: $(date)" >> compliance-report.md
        echo "" >> compliance-report.md
        echo "## Pod Security Standards" >> compliance-report.md
        kubectl get pods -n flextime-production --show-labels >> compliance-report.md
        echo "" >> compliance-report.md
        echo "## Network Policies" >> compliance-report.md
        kubectl get networkpolicies -n flextime-production -o yaml >> compliance-report.md
        
    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance-report.md
        retention-days: 90