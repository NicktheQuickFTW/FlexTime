
@api_bp.route('/agents', methods=['GET'])
def get_agents():
    """Get information about available agents."""
    agent_registry = app.config.get('AGENT_REGISTRY')
    
    if not agent_registry:
        return jsonify({'error': 'Agent registry not initialized'}), 500
    
    agents = []
    
    for agent_id, agent in agent_registry.agents.items():
        agents.append({
            'agent_id': agent.agent_id,
            'agent_type': agent.agent_type,
            'status': agent.status,
            'capabilities': list(agent.capabilities),
            'created_at': agent.created_at.isoformat(),
            'last_active': agent.last_active.isoformat()
        })
    
    return jsonify({
        'count': len(agents),
        'agents': agents
    })

@api_bp.route('/agents/directors', methods=['GET'])
def get_directors():
    """Get information about director agents."""
    director_registry = app.config.get('DIRECTOR_REGISTRY')
    
    if not director_registry:
        return jsonify({'error': 'Director registry not initialized'}), 500
    
    directors = []
    
    for director_type, director in director_registry.directors.items():
        directors.append({
            'agent_id': director.agent_id,
            'director_type': director.director_type,
            'status': director.status,
            'capabilities': list(director.capabilities),
            'specialized_agents': list(director.specialized_agents),
            'task_count': len(director.tasks),
            'created_at': director.created_at.isoformat(),
            'last_active': director.last_active.isoformat()
        })
    
    return jsonify({
        'count': len(directors),
        'directors': directors
    })

@api_bp.route('/agents/directors/<director_type>/tasks', methods=['POST'])
def create_director_task(director_type):
    """Create a task for a director agent."""
    director_registry = app.config.get('DIRECTOR_REGISTRY')
    
    if not director_registry:
        return jsonify({'error': 'Director registry not initialized'}), 500
    
    # Get the director
    director = director_registry.get_director(director_type)
    
    if not director:
        return jsonify({'error': f'Director of type {director_type} not found'}), 404
    
    # Get the request data
    data = request.json
    
    if not data:
        return jsonify({'error': 'Invalid request data'}), 400
    
    # Extract task details
    task_type = data.get('taskType')
    description = data.get('description', f"Task of type {task_type}")
    parameters = data.get('parameters', {})
    
    if not task_type:
        return jsonify({'error': 'Missing task type'}), 400
    
    # Create the task
    task = director.create_task(task_type, description, parameters)
    
    # Decide which agent to delegate to
    agent_id = director._select_agent_for_task(task)
    
    if not agent_id:
        return jsonify({
            'success': True,
            'task_id': task['task_id'],
            'status': task['status'],
            'message': 'Task created but no suitable agent found for delegation'
        })
    
    # Delegate the task
    success = director.delegate_task(task['task_id'], agent_id)
    
    if success:
        return jsonify({
            'success': True,
            'task_id': task['task_id'],
            'status': 'delegated',
            'agent_id': agent_id
        })
    else:
        return jsonify({
            'success': True,
            'task_id': task['task_id'],
            'status': task['status'],
            'message': f'Task created but delegation to agent {agent_id} failed'
        })