{
  "openapi": "3.0.3",
  "info": {
    "title": "FlexTime Microservices API",
    "version": "2.0.0",
    "description": "New microservices-based API for FlexTime scheduling system",
    "contact": {
      "name": "FlexTime Development Team",
      "email": "dev@flextime.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.flextime.com/v2",
      "description": "Production Microservices API"
    },
    {
      "url": "https://staging-api.flextime.com/v2",
      "description": "Staging Microservices API"
    },
    {
      "url": "http://localhost:8080",
      "description": "Local Development API Gateway"
    }
  ],
  "tags": [
    {
      "name": "Team Availability",
      "description": "Team availability and scheduling preferences"
    },
    {
      "name": "Venue Management",
      "description": "Venue configuration and availability"
    },
    {
      "name": "Constraint Validation",
      "description": "Schedule constraint validation and management"
    },
    {
      "name": "Schedule Generation",
      "description": "Schedule generation and optimization"
    }
  ],
  "paths": {
    "/team-availability/profiles": {
      "get": {
        "summary": "Get team scheduling profiles",
        "description": "Retrieve team scheduling profiles with preferences and constraints",
        "tags": ["Team Availability"],
        "parameters": [
          {
            "name": "team_id",
            "in": "query",
            "schema": {"type": "integer"},
            "description": "Filter by team ID"
          },
          {
            "name": "season_id",
            "in": "query",
            "schema": {"type": "integer"},
            "description": "Filter by season ID"
          },
          {
            "name": "sport_id",
            "in": "query",
            "schema": {"type": "integer"},
            "description": "Filter by sport ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of team scheduling profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/TeamSchedulingProfile"}
                    },
                    "pagination": {"$ref": "#/components/schemas/Pagination"}
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create team scheduling profile",
        "description": "Create a new team scheduling profile with preferences",
        "tags": ["Team Availability"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/TeamSchedulingProfileCreate"}
            }
          }
        },
        "responses": {
          "201": {
            "description": "Team scheduling profile created",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/TeamSchedulingProfile"}
              }
            }
          }
        }
      }
    },
    "/team-availability/blackouts": {
      "get": {
        "summary": "Get team blackout dates",
        "description": "Retrieve team blackout periods and unavailable dates",
        "tags": ["Team Availability"],
        "parameters": [
          {
            "name": "team_id",
            "in": "query",
            "schema": {"type": "integer"},
            "description": "Filter by team ID"
          },
          {
            "name": "start_date",
            "in": "query",
            "schema": {"type": "string", "format": "date"},
            "description": "Filter blackouts starting from this date"
          },
          {
            "name": "end_date",
            "in": "query",
            "schema": {"type": "string", "format": "date"},
            "description": "Filter blackouts ending before this date"
          }
        ],
        "responses": {
          "200": {
            "description": "List of team blackout periods",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/TeamBlackoutDate"}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create team blackout period",
        "description": "Create a new blackout period for a team",
        "tags": ["Team Availability"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/TeamBlackoutDateCreate"}
            }
          }
        },
        "responses": {
          "201": {
            "description": "Blackout period created",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/TeamBlackoutDate"}
              }
            }
          }
        }
      }
    },
    "/venue-management/venues": {
      "get": {
        "summary": "Get venue profiles",
        "description": "Retrieve detailed venue information and capabilities",
        "tags": ["Venue Management"],
        "parameters": [
          {
            "name": "venue_type",
            "in": "query",
            "schema": {"type": "string"},
            "description": "Filter by venue type"
          },
          {
            "name": "capacity_min",
            "in": "query",
            "schema": {"type": "integer"},
            "description": "Minimum capacity filter"
          },
          {
            "name": "city",
            "in": "query",
            "schema": {"type": "string"},
            "description": "Filter by city"
          },
          {
            "name": "available",
            "in": "query",
            "schema": {"type": "boolean"},
            "description": "Filter by availability status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of venue profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/VenueProfile"}
                    },
                    "pagination": {"$ref": "#/components/schemas/Pagination"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/venue-management/venues/{venue_id}/availability": {
      "get": {
        "summary": "Get venue availability",
        "description": "Retrieve venue availability for a specific date range",
        "tags": ["Venue Management"],
        "parameters": [
          {
            "name": "venue_id",
            "in": "path",
            "required": true,
            "schema": {"type": "integer"}
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {"type": "string", "format": "date"}
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {"type": "string", "format": "date"}
          }
        ],
        "responses": {
          "200": {
            "description": "Venue availability information",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/VenueAvailability"}
              }
            }
          }
        }
      }
    },
    "/venue-management/venues/{venue_id}/conflicts": {
      "get": {
        "summary": "Get venue booking conflicts",
        "description": "Retrieve current and upcoming venue booking conflicts",
        "tags": ["Venue Management"],
        "parameters": [
          {
            "name": "venue_id",
            "in": "path",
            "required": true,
            "schema": {"type": "integer"}
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["unresolved", "in_progress", "resolved"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of venue conflicts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/VenueBookingConflict"}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/constraint-validation/categories": {
      "get": {
        "summary": "Get constraint categories",
        "description": "Retrieve available constraint categories and types",
        "tags": ["Constraint Validation"],
        "responses": {
          "200": {
            "description": "List of constraint categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/ConstraintCategory"}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/constraint-validation/templates": {
      "get": {
        "summary": "Get constraint templates",
        "description": "Retrieve reusable constraint templates",
        "tags": ["Constraint Validation"],
        "parameters": [
          {
            "name": "category_id",
            "in": "query",
            "schema": {"type": "integer"},
            "description": "Filter by category ID"
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["draft", "active", "deprecated"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of constraint templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/ConstraintTemplate"}
                    },
                    "pagination": {"$ref": "#/components/schemas/Pagination"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/constraint-validation/validate": {
      "post": {
        "summary": "Validate constraints",
        "description": "Validate a schedule against a set of constraints",
        "tags": ["Constraint Validation"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/ConstraintValidationRequest"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Constraint validation results",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ConstraintValidationResponse"}
              }
            }
          }
        }
      }
    },
    "/schedule-generation/requests": {
      "post": {
        "summary": "Create schedule generation request",
        "description": "Submit a new schedule generation request",
        "tags": ["Schedule Generation"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/ScheduleGenerationRequest"}
            }
          }
        },
        "responses": {
          "202": {
            "description": "Schedule generation request accepted",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ScheduleGenerationResponse"}
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get schedule generation requests",
        "description": "Retrieve schedule generation requests and their status",
        "tags": ["Schedule Generation"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["submitted", "queued", "in_progress", "completed", "failed"]
            }
          },
          {
            "name": "sport_id",
            "in": "query",
            "schema": {"type": "integer"}
          }
        ],
        "responses": {
          "200": {
            "description": "List of schedule generation requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/ScheduleGenerationRequestStatus"}
                    },
                    "pagination": {"$ref": "#/components/schemas/Pagination"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schedule-generation/requests/{request_id}": {
      "get": {
        "summary": "Get schedule generation request status",
        "description": "Retrieve detailed status of a schedule generation request",
        "tags": ["Schedule Generation"],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "schema": {"type": "integer"}
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule generation request details",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ScheduleGenerationRequestStatus"}
              }
            }
          }
        }
      }
    },
    "/schedule-generation/algorithms": {
      "get": {
        "summary": "Get available algorithms",
        "description": "Retrieve available scheduling algorithms and their configurations",
        "tags": ["Schedule Generation"],
        "responses": {
          "200": {
            "description": "List of available algorithms",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/AlgorithmConfiguration"}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schedule-generation/compare": {
      "post": {
        "summary": "Compare schedules",
        "description": "Compare multiple generated schedules using specified criteria",
        "tags": ["Schedule Generation"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/ScheduleComparisonRequest"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schedule comparison results",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/ScheduleComparisonResponse"}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TeamSchedulingProfile": {
        "type": "object",
        "properties": {
          "profile_id": {"type": "integer"},
          "team_id": {"type": "integer"},
          "season_id": {"type": "integer"},
          "sport_id": {"type": "integer"},
          "preferred_game_times": {
            "type": "object",
            "properties": {
              "weekday": {"type": "array", "items": {"type": "string"}},
              "weekend": {"type": "array", "items": {"type": "string"}}
            }
          },
          "max_games_per_week": {"type": "integer"},
          "min_rest_days": {"type": "integer"},
          "max_consecutive_away_games": {"type": "integer"},
          "max_consecutive_home_games": {"type": "integer"},
          "max_travel_distance_miles": {"type": "integer"},
          "preferred_travel_days": {"type": "array", "items": {"type": "string"}},
          "avoid_travel_days": {"type": "array", "items": {"type": "string"}},
          "max_travel_time_hours": {"type": "number"},
          "avoid_exam_periods": {"type": "boolean"},
          "finals_week_blackout": {"type": "boolean"},
          "tv_broadcast_priority": {"type": "integer", "minimum": 1, "maximum": 5},
          "flexibility_score": {"type": "number", "minimum": 0, "maximum": 1},
          "profile_active": {"type": "boolean"},
          "last_updated": {"type": "string", "format": "date-time"},
          "created_at": {"type": "string", "format": "date-time"},
          "updated_at": {"type": "string", "format": "date-time"}
        }
      },
      "TeamSchedulingProfileCreate": {
        "type": "object",
        "required": ["team_id", "season_id", "sport_id"],
        "properties": {
          "team_id": {"type": "integer"},
          "season_id": {"type": "integer"},
          "sport_id": {"type": "integer"},
          "preferred_game_times": {"type": "object"},
          "max_games_per_week": {"type": "integer", "default": 3},
          "min_rest_days": {"type": "integer", "default": 1},
          "max_consecutive_away_games": {"type": "integer", "default": 3},
          "max_consecutive_home_games": {"type": "integer", "default": 4},
          "max_travel_distance_miles": {"type": "integer", "default": 1000},
          "preferred_travel_days": {"type": "array", "items": {"type": "string"}},
          "avoid_travel_days": {"type": "array", "items": {"type": "string"}},
          "max_travel_time_hours": {"type": "number", "default": 8.0},
          "avoid_exam_periods": {"type": "boolean", "default": true},
          "finals_week_blackout": {"type": "boolean", "default": true},
          "tv_broadcast_priority": {"type": "integer", "minimum": 1, "maximum": 5, "default": 3},
          "flexibility_score": {"type": "number", "minimum": 0, "maximum": 1, "default": 0.5}
        }
      },
      "TeamBlackoutDate": {
        "type": "object",
        "properties": {
          "blackout_id": {"type": "integer"},
          "team_id": {"type": "integer"},
          "season_id": {"type": "integer"},
          "start_date": {"type": "string", "format": "date"},
          "end_date": {"type": "string", "format": "date"},
          "start_time": {"type": "string", "format": "time"},
          "end_time": {"type": "string", "format": "time"},
          "blackout_type": {
            "type": "string",
            "enum": ["academic_break", "exam_period", "finals_week", "facility_unavailable", "team_travel"]
          },
          "severity": {
            "type": "string",
            "enum": ["hard", "soft", "preference"]
          },
          "allows_conference_games": {"type": "boolean"},
          "allows_rivalry_games": {"type": "boolean"},
          "can_override": {"type": "boolean"},
          "reason": {"type": "string"},
          "recurring_annually": {"type": "boolean"},
          "created_at": {"type": "string", "format": "date-time"}
        }
      },
      "TeamBlackoutDateCreate": {
        "type": "object",
        "required": ["team_id", "season_id", "start_date", "end_date", "blackout_type", "reason"],
        "properties": {
          "team_id": {"type": "integer"},
          "season_id": {"type": "integer"},
          "start_date": {"type": "string", "format": "date"},
          "end_date": {"type": "string", "format": "date"},
          "start_time": {"type": "string", "format": "time"},
          "end_time": {"type": "string", "format": "time"},
          "blackout_type": {
            "type": "string",
            "enum": ["academic_break", "exam_period", "finals_week", "facility_unavailable", "team_travel"]
          },
          "severity": {
            "type": "string",
            "enum": ["hard", "soft", "preference"],
            "default": "hard"
          },
          "allows_conference_games": {"type": "boolean", "default": false},
          "allows_rivalry_games": {"type": "boolean", "default": false},
          "can_override": {"type": "boolean", "default": false},
          "reason": {"type": "string"},
          "recurring_annually": {"type": "boolean", "default": false}
        }
      },
      "VenueProfile": {
        "type": "object",
        "properties": {
          "profile_id": {"type": "integer"},
          "venue_id": {"type": "integer"},
          "venue_name": {"type": "string"},
          "venue_type": {
            "type": "string",
            "enum": ["indoor", "outdoor", "mixed", "field", "court", "pool", "track"]
          },
          "standard_capacity": {"type": "integer"},
          "maximum_capacity": {"type": "integer"},
          "field_dimensions": {"type": "object"},
          "simultaneous_events_capacity": {"type": "integer"},
          "climate_controlled": {"type": "boolean"},
          "weather_protection_level": {
            "type": "string",
            "enum": ["none", "partial", "full", "retractable"]
          },
          "ada_compliant": {"type": "boolean"},
          "wifi_available": {"type": "boolean"},
          "parking_spaces": {"type": "integer"},
          "broadcast_ready": {"type": "boolean"},
          "currently_available": {"type": "boolean"},
          "seasonal_availability": {
            "type": "string",
            "enum": ["year_round", "fall_winter", "spring_summer", "seasonal", "limited"]
          },
          "created_at": {"type": "string", "format": "date-time"},
          "updated_at": {"type": "string", "format": "date-time"}
        }
      },
      "VenueAvailability": {
        "type": "object",
        "properties": {
          "venue_id": {"type": "integer"},
          "date_range": {
            "type": "object",
            "properties": {
              "start_date": {"type": "string", "format": "date"},
              "end_date": {"type": "string", "format": "date"}
            }
          },
          "operational_hours": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "day_of_week": {"type": "integer"},
                "open_time": {"type": "string", "format": "time"},
                "close_time": {"type": "string", "format": "time"},
                "allows_games": {"type": "boolean"}
              }
            }
          },
          "unavailable_periods": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "start_datetime": {"type": "string", "format": "date-time"},
                "end_datetime": {"type": "string", "format": "date-time"},
                "reason": {"type": "string"},
                "type": {"type": "string"}
              }
            }
          },
          "booking_rules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "rule_name": {"type": "string"},
                "conditions": {"type": "object"},
                "actions": {"type": "object"}
              }
            }
          }
        }
      },
      "VenueBookingConflict": {
        "type": "object",
        "properties": {
          "conflict_id": {"type": "integer"},
          "venue_id": {"type": "integer"},
          "conflict_type": {
            "type": "string",
            "enum": ["double_booking", "maintenance_overlap", "setup_time_conflict", "capacity_exceeded"]
          },
          "conflict_description": {"type": "string"},
          "conflict_start_datetime": {"type": "string", "format": "date-time"},
          "conflict_end_datetime": {"type": "string", "format": "date-time"},
          "affected_events": {"type": "array", "items": {"type": "object"}},
          "resolution_status": {
            "type": "string",
            "enum": ["unresolved", "in_progress", "resolved", "escalated"]
          },
          "resolution_strategy": {"type": "string"},
          "financial_impact": {"type": "number"},
          "created_at": {"type": "string", "format": "date-time"}
        }
      },
      "ConstraintCategory": {
        "type": "object",
        "properties": {
          "category_id": {"type": "integer"},
          "category_name": {"type": "string"},
          "category_code": {"type": "string"},
          "description": {"type": "string"},
          "scope": {
            "type": "string",
            "enum": ["global", "conference", "sport", "team", "venue"]
          },
          "domain": {
            "type": "string",
            "enum": ["travel", "rest", "venue", "broadcast", "competitive", "academic", "custom"]
          },
          "default_severity": {
            "type": "string",
            "enum": ["hard", "soft", "advisory"]
          },
          "validation_complexity": {"type": "integer", "minimum": 1, "maximum": 5},
          "active": {"type": "boolean"}
        }
      },
      "ConstraintTemplate": {
        "type": "object",
        "properties": {
          "template_id": {"type": "integer"},
          "category_id": {"type": "integer"},
          "template_name": {"type": "string"},
          "template_code": {"type": "string"},
          "version": {"type": "string"},
          "description": {"type": "string"},
          "validation_logic": {"type": "object"},
          "parameter_schema": {"type": "object"},
          "default_parameters": {"type": "object"},
          "applicable_sports": {"type": "array", "items": {"type": "integer"}},
          "estimated_execution_time_ms": {"type": "integer"},
          "status": {
            "type": "string",
            "enum": ["draft", "active", "deprecated", "archived"]
          },
          "created_at": {"type": "string", "format": "date-time"}
        }
      },
      "ConstraintValidationRequest": {
        "type": "object",
        "required": ["schedule_data", "constraints"],
        "properties": {
          "schedule_data": {"type": "object"},
          "constraints": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "template_id": {"type": "integer"},
                "parameters": {"type": "object"},
                "weight": {"type": "number"}
              }
            }
          },
          "validation_options": {
            "type": "object",
            "properties": {
              "stop_on_first_violation": {"type": "boolean", "default": false},
              "include_warnings": {"type": "boolean", "default": true},
              "timeout_seconds": {"type": "integer", "default": 30}
            }
          }
        }
      },
      "ConstraintValidationResponse": {
        "type": "object",
        "properties": {
          "validation_id": {"type": "string"},
          "overall_status": {
            "type": "string",
            "enum": ["passed", "failed", "warning", "error"]
          },
          "total_violations": {"type": "integer"},
          "constraint_results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "template_id": {"type": "integer"},
                "status": {"type": "string"},
                "violations": {"type": "array"},
                "score": {"type": "number"},
                "execution_time_ms": {"type": "integer"}
              }
            }
          },
          "summary_metrics": {
            "type": "object",
            "properties": {
              "total_score": {"type": "number"},
              "hard_violations": {"type": "integer"},
              "soft_violations": {"type": "integer"},
              "warnings": {"type": "integer"}
            }
          },
          "recommendations": {"type": "array", "items": {"type": "string"}},
          "execution_time_ms": {"type": "integer"},
          "timestamp": {"type": "string", "format": "date-time"}
        }
      },
      "ScheduleGenerationRequest": {
        "type": "object",
        "required": ["request_name", "sport_id", "schedule_start_date", "schedule_end_date", "included_teams"],
        "properties": {
          "request_name": {"type": "string"},
          "request_type": {
            "type": "string",
            "enum": ["new_schedule", "schedule_update", "reschedule", "optimization"]
          },
          "priority_level": {"type": "integer", "minimum": 1, "maximum": 5, "default": 3},
          "sport_id": {"type": "integer"},
          "season_id": {"type": "integer"},
          "conference_id": {"type": "integer"},
          "generation_parameters": {"type": "object"},
          "constraint_profile_id": {"type": "integer"},
          "custom_constraints": {"type": "array"},
          "included_teams": {"type": "array", "items": {"type": "integer"}},
          "schedule_start_date": {"type": "string", "format": "date"},
          "schedule_end_date": {"type": "string", "format": "date"},
          "total_games_required": {"type": "integer"},
          "conference_games_required": {"type": "integer"},
          "home_away_balance_target": {"type": "number", "minimum": 0, "maximum": 1, "default": 0.5},
          "primary_objectives": {"type": "array", "items": {"type": "string"}},
          "objective_weights": {"type": "object"},
          "optimization_timeout_minutes": {"type": "integer", "default": 60},
          "minimum_quality_score": {"type": "number", "default": 70.0},
          "output_formats": {"type": "array", "items": {"type": "string"}}
        }
      },
      "ScheduleGenerationResponse": {
        "type": "object",
        "properties": {
          "request_id": {"type": "integer"},
          "status": {"type": "string"},
          "estimated_completion": {"type": "string", "format": "date-time"},
          "job_id": {"type": "string"},
          "message": {"type": "string"}
        }
      },
      "ScheduleGenerationRequestStatus": {
        "type": "object",
        "properties": {
          "request_id": {"type": "integer"},
          "request_name": {"type": "string"},
          "request_type": {"type": "string"},
          "status": {
            "type": "string",
            "enum": ["submitted", "queued", "in_progress", "completed", "failed", "cancelled"]
          },
          "progress_percentage": {"type": "integer", "minimum": 0, "maximum": 100},
          "current_phase": {"type": "string"},
          "submitted_at": {"type": "string", "format": "date-time"},
          "started_at": {"type": "string", "format": "date-time"},
          "completed_at": {"type": "string", "format": "date-time"},
          "generated_schedule_ids": {"type": "array", "items": {"type": "integer"}},
          "quality_metrics": {"type": "object"},
          "error_messages": {"type": "array", "items": {"type": "string"}},
          "warnings": {"type": "array", "items": {"type": "string"}}
        }
      },
      "AlgorithmConfiguration": {
        "type": "object",
        "properties": {
          "config_id": {"type": "integer"},
          "algorithm_name": {"type": "string"},
          "algorithm_type": {
            "type": "string",
            "enum": ["simulated_annealing", "genetic_algorithm", "constraint_programming", "tabu_search"]
          },
          "version": {"type": "string"},
          "parameters": {"type": "object"},
          "typical_execution_time_minutes": {"type": "integer"},
          "memory_requirements_mb": {"type": "integer"},
          "scalability_rating": {"type": "integer", "minimum": 1, "maximum": 5},
          "solution_quality_rating": {"type": "integer", "minimum": 1, "maximum": 5},
          "best_for_problem_sizes": {"type": "object"},
          "suitable_for_sports": {"type": "array", "items": {"type": "integer"}},
          "status": {
            "type": "string",
            "enum": ["draft", "testing", "active", "deprecated", "archived"]
          }
        }
      },
      "ScheduleComparisonRequest": {
        "type": "object",
        "required": ["schedule_ids", "comparison_criteria"],
        "properties": {
          "comparison_name": {"type": "string"},
          "schedule_ids": {"type": "array", "items": {"type": "integer"}},
          "baseline_schedule_id": {"type": "integer"},
          "comparison_criteria": {"type": "array", "items": {"type": "string"}},
          "evaluation_criteria": {"type": "object"},
          "include_statistical_analysis": {"type": "boolean", "default": true}
        }
      },
      "ScheduleComparisonResponse": {
        "type": "object",
        "properties": {
          "comparison_id": {"type": "integer"},
          "overall_winner_schedule_id": {"type": "integer"},
          "detailed_scores": {"type": "object"},
          "ranking_results": {"type": "array"},
          "pareto_optimal_schedules": {"type": "array", "items": {"type": "integer"}},
          "recommendations": {"type": "array", "items": {"type": "string"}},
          "comparison_timestamp": {"type": "string", "format": "date-time"},
          "comparison_duration_seconds": {"type": "integer"}
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {"type": "integer", "minimum": 1},
          "limit": {"type": "integer", "minimum": 1, "maximum": 100},
          "total": {"type": "integer"},
          "total_pages": {"type": "integer"}
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {"type": "string"},
          "message": {"type": "string"},
          "code": {"type": "integer"},
          "details": {"type": "object"},
          "timestamp": {"type": "string", "format": "date-time"},
          "request_id": {"type": "string"}
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://auth.flextime.com/oauth/token",
            "scopes": {
              "team:read": "Read team information",
              "team:write": "Modify team information",
              "venue:read": "Read venue information",
              "venue:write": "Modify venue information",
              "constraint:read": "Read constraint information",
              "constraint:write": "Modify constraint information",
              "schedule:read": "Read schedule information",
              "schedule:write": "Create and modify schedules",
              "admin": "Full administrative access"
            }
          }
        }
      }
    }
  },
  "security": [
    {"ApiKeyAuth": []},
    {"BearerAuth": []},
    {"OAuth2": ["team:read", "venue:read", "constraint:read", "schedule:read"]}
  ],
  "x-microservices-metadata": {
    "version": "2.0",
    "architecture": "microservices",
    "api_gateway": "Kong",
    "service_mesh": "Istio",
    "services": {
      "team-availability-service": {
        "port": 8001,
        "health_check": "/health",
        "metrics": "/metrics"
      },
      "venue-management-service": {
        "port": 8002,
        "health_check": "/health",
        "metrics": "/metrics"
      },
      "constraint-validation-service": {
        "port": 8003,
        "health_check": "/health",
        "metrics": "/metrics"
      },
      "schedule-generation-service": {
        "port": 8004,
        "health_check": "/health",
        "metrics": "/metrics"
      }
    },
    "rate_limiting": {
      "default": "1000/hour",
      "premium": "10000/hour"
    },
    "caching": {
      "strategy": "redis",
      "ttl": 300
    }
  }
}