/**
 * Schedule Importer Service
 * 
 * Imports existing schedules from various formats, with special support
 * for Big 12's matrix format used in their official schedules.
 */

const Big12DataService = require('./big12DataService');
const logger = require('../src/utils/logger');
const csv = require('csv-parse/sync');
const { v4: uuidv4 } = require('uuid');

class ScheduleImporter {
  /**
   * Team abbreviation mappings used in Big 12 schedules
   */
  static TEAM_ABBREVIATIONS = {
    'ARIZ': 'Arizona',
    'ASU': 'Arizona State',
    'BYU': 'BYU',
    'UTAH': 'Utah',
    'COL': 'Colorado',
    'ISU': 'Iowa State',
    'KU': 'Kansas',
    'KSU': 'Kansas State',
    'TTU': 'Texas Tech',
    'TCU': 'TCU',
    'BU': 'Baylor',
    'UH': 'Houston',
    'UCF': 'UCF',
    'CIN': 'Cincinnati',
    'WVU': 'West Virginia',
    // Additional abbreviations for other sports
    'OU': 'Oklahoma',
    'OSU': 'Oklahoma State',
    'UT': 'Texas',
    'OKST': 'Oklahoma State',
    'KST': 'Kansas State',
    'BAY': 'Baylor',
    'CINCY': 'Cincinnati',
    'WVA': 'West Virginia'
  };

  /**
   * Import a schedule from various formats
   */
  static async importSchedule(fileContent, format, options = {}) {
    try {
      logger.info(`Importing schedule in ${format} format`);
      
      let parsedGames;
      switch(format) {
        case 'big12-matrix':
          parsedGames = await this.parseBig12Matrix(fileContent, options);
          break;
        case 'big12-week-matrix':
          parsedGames = await this.parseBig12WeekMatrix(fileContent, options);
          break;
        case 'csv':
          parsedGames = await this.parseStandardCSV(fileContent, options);
          break;
        case 'json':
          parsedGames = await this.parseJSON(fileContent, options);
          break;
        default:
          throw new Error(`Unsupported format: ${format}`);
      }

      // Validate and enrich the parsed games
      const validatedGames = await this.validateAndEnrichGames(parsedGames, options.sport_id);
      
      return {
        success: true,
        format: format,
        games_count: validatedGames.length,
        games: validatedGames,
        season: this.extractSeasonInfo(validatedGames),
        import_date: new Date().toISOString()
      };
    } catch (error) {
      logger.error('Schedule import failed:', error);
      throw error;
    }
  }

  /**
   * Parse Big 12 matrix format (like the volleyball schedule)
   */
  static async parseBig12Matrix(fileContent, options = {}) {
    const lines = fileContent.split('\n').filter(line => line.trim());
    const games = [];
    
    // First line contains team headers
    const headerLine = lines[0];
    const headers = headerLine.split(',').map(h => h.trim());
    
    // Find where team columns start (after Date column)
    const teamColumns = headers.slice(2); // Skip 'Day' and 'Date'
    const teamAbbreviations = teamColumns.filter(col => col && col.length <= 4); // Team abbreviations are short
    
    logger.info(`Found ${teamAbbreviations.length} teams in schedule matrix`);
    
    // Process each date row
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line || line.includes('THANKSGIVING') || line.includes('As of')) continue;
      
      const cells = this.parseCSVLine(line);
      if (cells.length < 3) continue;
      
      const dayOfWeek = cells[0];
      const dateStr = cells[1];
      
      if (!dateStr || !this.isValidDate(dateStr)) continue;
      
      // Parse date (format: "24-Sep" -> "2025-09-24")
      const gameDate = this.parseBig12Date(dateStr, options.year || 2025);
      
      // Process each team's opponent for this date
      for (let teamIdx = 0; teamIdx < teamAbbreviations.length; teamIdx++) {
        const teamAbbr = teamAbbreviations[teamIdx];
        const opponentCell = cells[teamIdx + 2]; // +2 to skip Day and Date columns
        
        if (!opponentCell || opponentCell.trim() === '') continue;
        
        // Parse opponent and location
        const { opponent, isAway, isNeutral } = this.parseOpponent(opponentCell);
        if (!opponent) continue;
        
        // Skip if we've already recorded this game (avoid duplicates)
        const isDuplicate = games.some(g => 
          g.date === gameDate &&
          ((g.home_team === teamAbbr && g.away_team === opponent) ||
           (g.away_team === teamAbbr && g.home_team === opponent))
        );
        
        if (!isDuplicate) {
          if (isAway) {
            // This team is playing away
            games.push({
              date: gameDate,
              day_of_week: dayOfWeek,
              home_team: opponent,
              away_team: teamAbbr,
              location_type: isNeutral ? 'neutral' : 'home',
              raw_text: opponentCell
            });
          } else {
            // This team is playing at home
            games.push({
              date: gameDate,
              day_of_week: dayOfWeek,
              home_team: teamAbbr,
              away_team: opponent,
              location_type: 'home',
              raw_text: opponentCell
            });
          }
        }
      }
    }
    
    logger.info(`Parsed ${games.length} games from Big 12 matrix format`);
    return games;
  }

  /**
   * Parse Big 12 week-based matrix format (like lacrosse schedule)
   * Format: Week | Date | Team1 | Team2 | ... where cells contain opponents
   */
  static async parseBig12WeekMatrix(fileContent, options = {}) {
    const lines = fileContent.split('\n').filter(line => line.trim());
    const games = [];
    
    // First line contains headers
    const headerLine = lines[0];
    const headers = headerLine.split(',').map(h => h.trim());
    
    // Find team columns (skip Week and Date columns)
    const teamColumns = headers.slice(2);
    
    logger.info(`Found ${teamColumns.length} teams in week-based matrix: ${teamColumns.join(', ')}`);
    
    // Add team abbreviations for lacrosse affiliate members
    const lacrosseAbbreviations = {
      'UF': 'Florida',
      'UCD': 'UC Davis', 
      'SDSU': 'San Diego State',
      ...this.TEAM_ABBREVIATIONS
    };
    
    // Process each week row
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) continue;
      
      const cells = this.parseCSVLine(line);
      if (cells.length < 3) continue;
      
      const week = cells[0];
      const dateStr = cells[1];
      
      if (!dateStr || dateStr === 'Date') continue;
      
      // Parse date (format: "3/28/26" -> "2026-03-28")
      const gameDate = this.parseShortDate(dateStr, options.year || 2026);
      if (!gameDate) continue;
      
      // Process each team's opponent for this week
      for (let teamIdx = 0; teamIdx < teamColumns.length; teamIdx++) {
        const teamAbbr = teamColumns[teamIdx];
        const opponentCell = cells[teamIdx + 2]; // +2 to skip Week and Date
        
        if (!opponentCell || opponentCell.trim() === '') continue;
        
        // Parse opponent and location
        const { opponent, isAway } = this.parseOpponent(opponentCell);
        if (!opponent) continue;
        
        // Skip if we've already recorded this game
        const isDuplicate = games.some(g => 
          g.date === gameDate &&
          ((g.home_team === teamAbbr && g.away_team === opponent) ||
           (g.away_team === teamAbbr && g.home_team === opponent))
        );
        
        if (!isDuplicate) {
          if (isAway) {
            games.push({
              date: gameDate,
              week: week,
              home_team: opponent,
              away_team: teamAbbr,
              home_team_name: lacrosseAbbreviations[opponent] || opponent,
              away_team_name: lacrosseAbbreviations[teamAbbr] || teamAbbr,
              raw_text: opponentCell
            });
          } else {
            games.push({
              date: gameDate,
              week: week,
              home_team: teamAbbr,
              away_team: opponent,
              home_team_name: lacrosseAbbreviations[teamAbbr] || teamAbbr,
              away_team_name: lacrosseAbbreviations[opponent] || opponent,
              raw_text: opponentCell
            });
          }
        }
      }
    }
    
    logger.info(`Parsed ${games.length} games from Big 12 week-based matrix format`);
    return games;
  }

  /**
   * Parse short date format (M/D/YY)
   */
  static parseShortDate(dateStr, defaultYear) {
    const parts = dateStr.split('/');
    if (parts.length !== 3) return null;
    
    const month = parts[0].padStart(2, '0');
    const day = parts[1].padStart(2, '0');
    let year = parts[2];
    
    // Handle 2-digit year
    if (year.length === 2) {
      year = `20${year}`;
    }
    
    return `${year}-${month}-${day}`;
  }

  /**
   * Parse standard CSV format
   */
  static async parseStandardCSV(fileContent, options = {}) {
    const records = csv.parse(fileContent, {
      columns: true,
      skip_empty_lines: true,
      trim: true
    });
    
    const games = records.map(record => ({
      date: record.Date || record.date,
      home_team: record.Home || record.home_team || record.HomeTeam,
      away_team: record.Away || record.away_team || record.AwayTeam,
      venue: record.Venue || record.venue || record.Location,
      time: record.Time || record.time || record.GameTime,
      tv: record.TV || record.tv || record.Network
    }));
    
    logger.info(`Parsed ${games.length} games from standard CSV format`);
    return games;
  }

  /**
   * Parse JSON format
   */
  static async parseJSON(fileContent, options = {}) {
    const data = JSON.parse(fileContent);
    const games = data.games || data.schedule || data;
    
    if (!Array.isArray(games)) {
      throw new Error('JSON must contain an array of games');
    }
    
    logger.info(`Parsed ${games.length} games from JSON format`);
    return games;
  }

  /**
   * Validate and enrich games with full team data
   */
  static async validateAndEnrichGames(games, sportId) {
    const enrichedGames = [];
    const errors = [];
    
    // Special handling for lacrosse affiliate members
    const lacrosseAffiliates = {
      'UF': 'Florida',
      'UCD': 'UC Davis',
      'SDSU': 'San Diego State'
    };
    
    for (const game of games) {
      try {
        // Convert team abbreviations to full names
        let homeTeamName = game.home_team_name || 
                          lacrosseAffiliates[game.home_team] || 
                          this.TEAM_ABBREVIATIONS[game.home_team] || 
                          game.home_team;
        let awayTeamName = game.away_team_name || 
                          lacrosseAffiliates[game.away_team] || 
                          this.TEAM_ABBREVIATIONS[game.away_team] || 
                          game.away_team;
        
        // Find team IDs
        const teams = Big12DataService.getTeams({ sport_id: sportId });
        const homeTeam = teams.find(t => 
          t.school_name === homeTeamName || 
          t.school_abbreviation === game.home_team
        );
        const awayTeam = teams.find(t => 
          t.school_name === awayTeamName || 
          t.school_abbreviation === game.away_team
        );
        
        if (!homeTeam || !awayTeam) {
          errors.push(`Could not find teams: ${game.home_team} vs ${game.away_team} on ${game.date}`);
          continue;
        }
        
        // Get venue information
        const venue = homeTeam ? Big12DataService.getVenues({
          school_id: homeTeam.school_id,
          sport_id: sportId
        })[0] : null;
        
        enrichedGames.push({
          game_id: uuidv4(),
          date: game.date,
          day_of_week: game.day_of_week || this.getDayOfWeek(game.date),
          time: game.time || this.getDefaultGameTime(game.day_of_week, sportId),
          home_team_id: homeTeam.team_id,
          away_team_id: awayTeam.team_id,
          home_team: homeTeam,
          away_team: awayTeam,
          venue_id: venue?.venue_id,
          venue: venue,
          location: venue ? `${venue.city}, ${venue.state}` : null,
          conference_game: true,
          tv_network: game.tv || null,
          notes: game.notes || null,
          import_source: game.raw_text || null
        });
      } catch (error) {
        errors.push(`Error processing game: ${error.message}`);
      }
    }
    
    if (errors.length > 0) {
      logger.warn(`Import completed with ${errors.length} errors:`, errors);
    }
    
    logger.info(`Successfully enriched ${enrichedGames.length} games`);
    return enrichedGames;
  }

  /**
   * Parse opponent string from Big 12 matrix format
   */
  static parseOpponent(opponentStr) {
    if (!opponentStr || opponentStr.trim() === '') {
      return { opponent: null, isAway: false, isNeutral: false };
    }
    
    let opponent = opponentStr.trim();
    let isAway = false;
    let isNeutral = false;
    
    // Check for away game indicator
    if (opponent.startsWith('at ') || opponent.startsWith('@')) {
      isAway = true;
      opponent = opponent.replace(/^(at |@)/, '').trim();
    }
    
    // Check for neutral site indicator
    if (opponent.includes('^') || opponent.toLowerCase().includes('neutral')) {
      isNeutral = true;
      opponent = opponent.replace('^', '').trim();
    }
    
    return { opponent, isAway, isNeutral };
  }

  /**
   * Parse Big 12 date format (e.g., "24-Sep" -> "2025-09-24")
   */
  static parseBig12Date(dateStr, year) {
    const months = {
      'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04',
      'May': '05', 'Jun': '06', 'Jul': '07', 'Aug': '08',
      'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'
    };
    
    const parts = dateStr.split('-');
    if (parts.length !== 2) return null;
    
    const day = parts[0].padStart(2, '0');
    const monthAbbr = parts[1];
    const month = months[monthAbbr];
    
    if (!month) return null;
    
    return `${year}-${month}-${day}`;
  }

  /**
   * Parse CSV line handling quoted values
   */
  static parseCSVLine(line) {
    const result = [];
    let current = '';
    let inQuotes = false;
    
    for (let i = 0; i < line.length; i++) {
      const char = line[i];
      
      if (char === '"') {
        inQuotes = !inQuotes;
      } else if (char === ',' && !inQuotes) {
        result.push(current.trim());
        current = '';
      } else {
        current += char;
      }
    }
    
    result.push(current.trim());
    return result;
  }

  /**
   * Check if date string is valid
   */
  static isValidDate(dateStr) {
    return dateStr && 
           !dateStr.includes('Day') && 
           !dateStr.includes('Date') &&
           dateStr.includes('-');
  }

  /**
   * Get day of week from date
   */
  static getDayOfWeek(dateStr) {
    const days = ['Su', 'M', 'Tu', 'W', 'Th', 'Fr', 'Sa'];
    const date = new Date(dateStr);
    return days[date.getDay()];
  }

  /**
   * Get default game time based on day and sport
   */
  static getDefaultGameTime(dayOfWeek, sportId) {
    // Sport-specific default times
    const sportDefaults = {
      24: { // Volleyball
        'W': '18:00',
        'Th': '18:00',
        'Fr': '18:00',
        'Sa': '14:00',
        'Su': '13:00'
      },
      8: { // Football
        'Sa': '14:30',
        'Fr': '19:00'
      },
      2: { // Men's Basketball
        'default': '19:00',
        'Sa': '14:00'
      }
    };
    
    const defaults = sportDefaults[sportId] || sportDefaults[2];
    return defaults[dayOfWeek] || defaults.default || '19:00';
  }

  /**
   * Extract season information from games
   */
  static extractSeasonInfo(games) {
    if (games.length === 0) return null;
    
    const dates = games.map(g => new Date(g.date)).sort((a, b) => a - b);
    const startDate = dates[0];
    const endDate = dates[dates.length - 1];
    
    // Count games by team
    const teamGames = {};
    games.forEach(game => {
      teamGames[game.home_team_id] = (teamGames[game.home_team_id] || 0) + 1;
      teamGames[game.away_team_id] = (teamGames[game.away_team_id] || 0) + 1;
    });
    
    return {
      start_date: startDate.toISOString().split('T')[0],
      end_date: endDate.toISOString().split('T')[0],
      total_games: games.length,
      teams_count: Object.keys(teamGames).length,
      games_per_team: teamGames,
      weeks: Math.ceil((endDate - startDate) / (7 * 24 * 60 * 60 * 1000))
    };
  }

  /**
   * Export games back to Big 12 matrix format
   */
  static exportToBig12Matrix(games, teams, startDate, endDate) {
    // This would be the reverse operation - convert games back to matrix format
    // Useful for exporting schedules in the format Big 12 uses
    // Implementation would create the date rows and fill in opponents
  }
}

module.exports = ScheduleImporter;