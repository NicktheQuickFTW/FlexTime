/**
 * Simple Constraint Evaluator
 * 
 * A pragmatic constraint evaluation system that checks basic scheduling
 * constraints without over-complexity. Focuses on the most important
 * constraints first.
 */

const Big12DataService = require('./big12DataService');
const logger = require('../src/utils/logger');

class SimpleConstraintEvaluator {
  /**
   * Evaluate a schedule against constraints
   * @param {Array} games - Array of scheduled games
   * @param {Array} constraints - Array of constraint objects
   * @returns {Object} Evaluation result with violations and score
   */
  static evaluateSchedule(games, constraints) {
    const violations = [];
    const warnings = [];
    
    // Group games by team for efficient checking
    const gamesByTeam = this.groupGamesByTeam(games);
    
    // Evaluate each constraint type
    for (const constraint of constraints) {
      try {
        switch (constraint.type) {
          case 'REST_DAYS':
            violations.push(...this.checkRestDays(gamesByTeam, constraint));
            break;
            
          case 'NO_BACK_TO_BACK_AWAY':
            violations.push(...this.checkBackToBackAway(gamesByTeam, constraint));
            break;
            
          case 'MAX_CONSECUTIVE_AWAY':
            violations.push(...this.checkMaxConsecutiveAway(gamesByTeam, constraint));
            break;
            
          case 'VENUE_AVAILABILITY':
            violations.push(...this.checkVenueAvailability(games, constraint));
            break;
            
          case 'EXAM_BLACKOUT':
          case 'BLACKOUT_DATES':
            violations.push(...this.checkBlackoutDates(games, constraint));
            break;
            
          case 'HOME_GAME_MINIMUM':
            violations.push(...this.checkHomeGameMinimum(gamesByTeam, constraint));
            break;
            
          case 'TRAVEL_DISTANCE':
            warnings.push(...this.checkTravelDistance(gamesByTeam, constraint));
            break;
            
          case 'CHAMPIONSHIP_DATE':
            violations.push(...this.checkChampionshipDate(games, constraint));
            break;
            
          default:
            logger.warn(`Unknown constraint type: ${constraint.type}`);
        }
      } catch (error) {
        logger.error(`Error evaluating constraint ${constraint.type}:`, error);
        warnings.push({
          type: 'EVALUATION_ERROR',
          constraint: constraint.type,
          message: error.message
        });
      }
    }
    
    // Calculate overall score
    const score = this.calculateScore(violations, warnings, games.length);
    
    return {
      valid: violations.length === 0,
      violations,
      warnings,
      score,
      summary: {
        total_games: games.length,
        total_violations: violations.length,
        total_warnings: warnings.length,
        constraints_checked: constraints.length
      }
    };
  }
  
  /**
   * Check minimum rest days between games for each team
   * @private
   */
  static checkRestDays(gamesByTeam, constraint) {
    const violations = [];
    const minRestDays = constraint.min_days || 2;
    
    for (const [teamId, games] of Object.entries(gamesByTeam)) {
      // Sort games by date
      const sortedGames = games.sort((a, b) => 
        new Date(a.datetime) - new Date(b.datetime)
      );
      
      // Check consecutive games
      for (let i = 1; i < sortedGames.length; i++) {
        const prevGame = sortedGames[i - 1];
        const currentGame = sortedGames[i];
        
        const daysBetween = this.getDaysBetween(
          new Date(prevGame.datetime),
          new Date(currentGame.datetime)
        );
        
        if (daysBetween < minRestDays) {
          violations.push({
            type: 'REST_DAYS_VIOLATION',
            team_id: parseInt(teamId),
            games: [prevGame.game_id, currentGame.game_id],
            message: `Team ${teamId} has only ${daysBetween} rest days between games (minimum: ${minRestDays})`,
            severity: 'high'
          });
        }
      }
    }
    
    return violations;
  }
  
  /**
   * Check for back-to-back away games
   * @private
   */
  static checkBackToBackAway(gamesByTeam, constraint) {
    const violations = [];
    
    for (const [teamId, games] of Object.entries(gamesByTeam)) {
      const sortedGames = games.sort((a, b) => 
        new Date(a.datetime) - new Date(b.datetime)
      );
      
      for (let i = 1; i < sortedGames.length; i++) {
        const prevGame = sortedGames[i - 1];
        const currentGame = sortedGames[i];
        
        // Check if both are away games
        if (prevGame.away_team_id === parseInt(teamId) && 
            currentGame.away_team_id === parseInt(teamId)) {
          
          const daysBetween = this.getDaysBetween(
            new Date(prevGame.datetime),
            new Date(currentGame.datetime)
          );
          
          // Consider it back-to-back if within 3 days
          if (daysBetween <= 3) {
            violations.push({
              type: 'BACK_TO_BACK_AWAY_VIOLATION',
              team_id: parseInt(teamId),
              games: [prevGame.game_id, currentGame.game_id],
              message: `Team ${teamId} has back-to-back away games`,
              severity: 'medium'
            });
          }
        }
      }
    }
    
    return violations;
  }
  
  /**
   * Check maximum consecutive away games
   * @private
   */
  static checkMaxConsecutiveAway(gamesByTeam, constraint) {
    const violations = [];
    const maxConsecutive = constraint.max_games || 3;
    
    for (const [teamId, games] of Object.entries(gamesByTeam)) {
      const sortedGames = games.sort((a, b) => 
        new Date(a.datetime) - new Date(b.datetime)
      );
      
      let consecutiveAway = 0;
      const consecutiveAwayGames = [];
      
      for (const game of sortedGames) {
        if (game.away_team_id === parseInt(teamId)) {
          consecutiveAway++;
          consecutiveAwayGames.push(game.game_id);
        } else {
          // Home game breaks the streak
          if (consecutiveAway > maxConsecutive) {
            violations.push({
              type: 'MAX_CONSECUTIVE_AWAY_VIOLATION',
              team_id: parseInt(teamId),
              games: [...consecutiveAwayGames],
              message: `Team ${teamId} has ${consecutiveAway} consecutive away games (max: ${maxConsecutive})`,
              severity: 'high'
            });
          }
          consecutiveAway = 0;
          consecutiveAwayGames.length = 0;
        }
      }
      
      // Check final streak
      if (consecutiveAway > maxConsecutive) {
        violations.push({
          type: 'MAX_CONSECUTIVE_AWAY_VIOLATION',
          team_id: parseInt(teamId),
          games: [...consecutiveAwayGames],
          message: `Team ${teamId} has ${consecutiveAway} consecutive away games (max: ${maxConsecutive})`,
          severity: 'high'
        });
      }
    }
    
    return violations;
  }
  
  /**
   * Check venue availability constraints
   * @private
   */
  static checkVenueAvailability(games, constraint) {
    const violations = [];
    const unavailableDates = constraint.unavailable_dates || [];
    
    for (const game of games) {
      const gameDate = new Date(game.datetime).toISOString().split('T')[0];
      
      if (unavailableDates.includes(gameDate) && game.venue_id === constraint.venue_id) {
        violations.push({
          type: 'VENUE_AVAILABILITY_VIOLATION',
          game_id: game.game_id,
          venue_id: game.venue_id,
          date: gameDate,
          message: `Venue ${game.venue_id} is not available on ${gameDate}`,
          severity: 'high'
        });
      }
    }
    
    return violations;
  }
  
  /**
   * Check blackout dates (exams, holidays, etc.)
   * @private
   */
  static checkBlackoutDates(games, constraint) {
    const violations = [];
    const startDate = new Date(constraint.start_date);
    const endDate = new Date(constraint.end_date);
    const affectedTeams = constraint.team_ids || [];
    
    for (const game of games) {
      const gameDate = new Date(game.datetime);
      
      if (gameDate >= startDate && gameDate <= endDate) {
        // Check if any affected teams are playing
        const isAffected = affectedTeams.length === 0 || 
          affectedTeams.includes(game.home_team_id) ||
          affectedTeams.includes(game.away_team_id);
        
        if (isAffected) {
          violations.push({
            type: 'BLACKOUT_DATE_VIOLATION',
            game_id: game.game_id,
            date: game.date,
            reason: constraint.reason || 'Blackout period',
            message: `Game scheduled during blackout period: ${constraint.reason || 'Unknown reason'}`,
            severity: 'high'
          });
        }
      }
    }
    
    return violations;
  }
  
  /**
   * Check minimum home games requirement
   * @private
   */
  static checkHomeGameMinimum(gamesByTeam, constraint) {
    const violations = [];
    const minHomeGames = constraint.min_games || 5;
    
    for (const [teamId, games] of Object.entries(gamesByTeam)) {
      const homeGames = games.filter(g => g.home_team_id === parseInt(teamId));
      
      if (homeGames.length < minHomeGames) {
        violations.push({
          type: 'HOME_GAME_MINIMUM_VIOLATION',
          team_id: parseInt(teamId),
          home_games: homeGames.length,
          required: minHomeGames,
          message: `Team ${teamId} has only ${homeGames.length} home games (minimum: ${minHomeGames})`,
          severity: 'medium'
        });
      }
    }
    
    return violations;
  }
  
  /**
   * Check travel distance (warning only)
   * @private
   */
  static checkTravelDistance(gamesByTeam, constraint) {
    const warnings = [];
    const maxDistance = constraint.max_distance || 1000; // miles
    
    // This would require venue location data and distance calculation
    // For now, just return a placeholder warning
    logger.info('Travel distance checking not yet implemented');
    
    return warnings;
  }
  
  /**
   * Check championship date constraints
   * @private
   */
  static checkChampionshipDate(games, constraint) {
    const violations = [];
    const championshipDate = new Date(constraint.championship_date);
    const minDaysBefore = constraint.min_days_before || 7;
    
    for (const game of games) {
      const gameDate = new Date(game.datetime);
      const daysBefore = this.getDaysBetween(gameDate, championshipDate);
      
      if (daysBefore < minDaysBefore && daysBefore >= 0) {
        violations.push({
          type: 'CHAMPIONSHIP_DATE_VIOLATION',
          game_id: game.game_id,
          date: game.date,
          days_before_championship: daysBefore,
          message: `Game scheduled only ${daysBefore} days before championship (minimum: ${minDaysBefore})`,
          severity: 'high'
        });
      }
    }
    
    return violations;
  }
  
  /**
   * Calculate overall schedule score
   * @private
   */
  static calculateScore(violations, warnings, totalGames) {
    // Start with perfect score
    let score = 100;
    
    // Deduct points for violations based on severity
    violations.forEach(violation => {
      switch (violation.severity) {
        case 'high':
          score -= 10;
          break;
        case 'medium':
          score -= 5;
          break;
        case 'low':
          score -= 2;
          break;
      }
    });
    
    // Minor deduction for warnings
    score -= warnings.length * 1;
    
    // Ensure score doesn't go below 0
    return Math.max(0, score);
  }
  
  /**
   * Helper: Group games by team
   * @private
   */
  static groupGamesByTeam(games) {
    const gamesByTeam = {};
    
    games.forEach(game => {
      // Add to home team's games
      if (!gamesByTeam[game.home_team_id]) {
        gamesByTeam[game.home_team_id] = [];
      }
      gamesByTeam[game.home_team_id].push(game);
      
      // Add to away team's games
      if (!gamesByTeam[game.away_team_id]) {
        gamesByTeam[game.away_team_id] = [];
      }
      gamesByTeam[game.away_team_id].push(game);
    });
    
    return gamesByTeam;
  }
  
  /**
   * Helper: Calculate days between two dates
   * @private
   */
  static getDaysBetween(date1, date2) {
    const diffTime = Math.abs(date2 - date1);
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  }
  
  /**
   * Get recommended constraints for a sport
   * @param {number} sportId - Sport ID
   * @returns {Array} Array of recommended constraints
   */
  static getRecommendedConstraints(sportId) {
    const sport = Big12DataService.getSportById(sportId);
    
    if (!sport) {
      return [];
    }
    
    const constraints = [];
    
    // Common constraints for all sports
    constraints.push({
      type: 'REST_DAYS',
      min_days: 2,
      description: 'Minimum 2 days rest between games'
    });
    
    // Sport-specific constraints
    switch (sport.code) {
      case 'FB': // Football
        constraints.push(
          {
            type: 'REST_DAYS',
            min_days: 6,
            description: 'Minimum 6 days between football games'
          },
          {
            type: 'NO_BACK_TO_BACK_AWAY',
            description: 'Avoid back-to-back away games'
          }
        );
        break;
        
      case 'MBB': // Men's Basketball
      case 'WBB': // Women's Basketball
        constraints.push(
          {
            type: 'MAX_CONSECUTIVE_AWAY',
            max_games: 3,
            description: 'Maximum 3 consecutive away games'
          },
          {
            type: 'HOME_GAME_MINIMUM',
            min_games: 8,
            description: 'Minimum 8 home games in conference play'
          }
        );
        break;
        
      case 'BSB': // Baseball
      case 'SB': // Softball
        constraints.push(
          {
            type: 'REST_DAYS',
            min_days: 1,
            description: 'Minimum 1 day rest between series'
          }
        );
        break;
    }
    
    return constraints;
  }
}

module.exports = SimpleConstraintEvaluator;